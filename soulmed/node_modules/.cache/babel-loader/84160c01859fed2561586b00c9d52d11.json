{"ast":null,"code":"/*! @preserve\n * numeral.js\n * version : 1.5.6\n * author : Adam Draper\n * license : MIT\n * http://adamwdraper.github.com/Numeral-js/\n */\n(function () {\n  /************************************\n      Variables\n  ************************************/\n  var numeral,\n      VERSION = '1.5.6',\n      // internal storage for language config files\n  languages = {},\n      defaults = {\n    currentLanguage: 'en',\n    zeroFormat: null,\n    nullFormat: null,\n    defaultFormat: '0,0'\n  },\n      options = {\n    currentLanguage: defaults.currentLanguage,\n    zeroFormat: defaults.zeroFormat,\n    nullFormat: defaults.nullFormat,\n    defaultFormat: defaults.defaultFormat\n  },\n      byteSuffixes = {\n    bytes: ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],\n    iec: ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']\n  };\n  /************************************\n      Constructors\n  ************************************/\n  // Numeral prototype object\n\n  function Numeral(number) {\n    this._value = number;\n  }\n  /**\n   * Implementation of toFixed() that treats floats more like decimals\n   *\n   * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present\n   * problems for accounting- and finance-related software.\n   */\n\n\n  function toFixed(value, maxDecimals, roundingFunction, optionals) {\n    var splitValue = value.toString().split('.'),\n        minDecimals = maxDecimals - (optionals || 0),\n        boundedPrecision,\n        optionalsRegExp,\n        power,\n        output; // Use the smallest precision value possible to avoid errors from floating point representation\n\n    if (splitValue.length === 2) {\n      boundedPrecision = Math.min(Math.max(splitValue[1].length, minDecimals), maxDecimals);\n    } else {\n      boundedPrecision = minDecimals;\n    }\n\n    power = Math.pow(10, boundedPrecision); //roundingFunction = (roundingFunction !== undefined ? roundingFunction : Math.round);\n    // Multiply up by precision, round accurately, then divide and use native toFixed():\n\n    output = (roundingFunction(value * power) / power).toFixed(boundedPrecision);\n\n    if (optionals > maxDecimals - boundedPrecision) {\n      optionalsRegExp = new RegExp('\\\\.?0{1,' + (optionals - (maxDecimals - boundedPrecision)) + '}$');\n      output = output.replace(optionalsRegExp, '');\n    }\n\n    return output;\n  }\n  /************************************\n      Formatting\n  ************************************/\n  // determine what type of formatting we need to do\n\n\n  function formatNumeral(n, format, roundingFunction) {\n    var output;\n\n    if (n._value === 0 && options.zeroFormat !== null) {\n      output = options.zeroFormat;\n    } else if (n._value === null && options.nullFormat !== null) {\n      output = options.nullFormat;\n    } else {\n      // figure out what kind of format we are dealing with\n      if (format.indexOf('$') > -1) {\n        output = formatCurrency(n, format, roundingFunction);\n      } else if (format.indexOf('%') > -1) {\n        output = formatPercentage(n, format, roundingFunction);\n      } else if (format.indexOf(':') > -1) {\n        output = formatTime(n, format);\n      } else if (format.indexOf('b') > -1 || format.indexOf('ib') > -1) {\n        output = formatBytes(n, format, roundingFunction);\n      } else if (format.indexOf('o') > -1) {\n        output = formatOrdinal(n, format, roundingFunction);\n      } else {\n        output = formatNumber(n._value, format, roundingFunction);\n      }\n    }\n\n    return output;\n  }\n\n  function formatCurrency(n, format, roundingFunction) {\n    var symbolIndex = format.indexOf('$'),\n        openParenIndex = format.indexOf('('),\n        minusSignIndex = format.indexOf('-'),\n        space = '',\n        spliceIndex,\n        output; // check for space before or after currency\n\n    if (format.indexOf(' $') > -1) {\n      space = ' ';\n      format = format.replace(' $', '');\n    } else if (format.indexOf('$ ') > -1) {\n      space = ' ';\n      format = format.replace('$ ', '');\n    } else {\n      format = format.replace('$', '');\n    } // format the number\n\n\n    output = formatNumber(n._value, format, roundingFunction, false); // position the symbol\n\n    if (symbolIndex <= 1) {\n      if (output.indexOf('(') > -1 || output.indexOf('-') > -1) {\n        output = output.split('');\n        spliceIndex = 1;\n\n        if (symbolIndex < openParenIndex || symbolIndex < minusSignIndex) {\n          // the symbol appears before the \"(\" or \"-\"\n          spliceIndex = 0;\n        }\n\n        output.splice(spliceIndex, 0, languages[options.currentLanguage].currency.symbol + space);\n        output = output.join('');\n      } else {\n        output = languages[options.currentLanguage].currency.symbol + space + output;\n      }\n    } else {\n      if (output.indexOf(')') > -1) {\n        output = output.split('');\n        output.splice(-1, 0, space + languages[options.currentLanguage].currency.symbol);\n        output = output.join('');\n      } else {\n        output = output + space + languages[options.currentLanguage].currency.symbol;\n      }\n    }\n\n    return output;\n  }\n\n  function formatPercentage(n, format, roundingFunction) {\n    var space = '',\n        output,\n        value = n._value * 100; // check for space before %\n\n    if (format.indexOf(' %') > -1) {\n      space = ' ';\n      format = format.replace(' %', '');\n    } else {\n      format = format.replace('%', '');\n    }\n\n    output = formatNumber(value, format, roundingFunction);\n\n    if (output.indexOf(')') > -1) {\n      output = output.split('');\n      output.splice(-1, 0, space + '%');\n      output = output.join('');\n    } else {\n      output = output + space + '%';\n    }\n\n    return output;\n  }\n\n  function formatBytes(n, format, roundingFunction) {\n    var output,\n        suffixes = format.indexOf('ib') > -1 ? byteSuffixes.iec : byteSuffixes.bytes,\n        value = n._value,\n        suffix = '',\n        power,\n        min,\n        max; // check for space before\n\n    if (format.indexOf(' b') > -1 || format.indexOf(' ib') > -1) {\n      suffix = ' ';\n      format = format.replace(' ib', '').replace(' b', '');\n    } else {\n      format = format.replace('ib', '').replace('b', '');\n    }\n\n    for (power = 0; power <= suffixes.length; power++) {\n      min = Math.pow(1024, power);\n      max = Math.pow(1024, power + 1);\n\n      if (value === null || value === 0 || value >= min && value < max) {\n        suffix += suffixes[power];\n\n        if (min > 0) {\n          value = value / min;\n        }\n\n        break;\n      }\n    }\n\n    output = formatNumber(value, format, roundingFunction);\n    return output + suffix;\n  }\n\n  function formatOrdinal(n, format, roundingFunction) {\n    var output,\n        ordinal = ''; // check for space before\n\n    if (format.indexOf(' o') > -1) {\n      ordinal = ' ';\n      format = format.replace(' o', '');\n    } else {\n      format = format.replace('o', '');\n    }\n\n    ordinal += languages[options.currentLanguage].ordinal(n._value);\n    output = formatNumber(n._value, format, roundingFunction);\n    return output + ordinal;\n  }\n\n  function formatTime(n) {\n    var hours = Math.floor(n._value / 60 / 60),\n        minutes = Math.floor((n._value - hours * 60 * 60) / 60),\n        seconds = Math.round(n._value - hours * 60 * 60 - minutes * 60);\n    return hours + ':' + (minutes < 10 ? '0' + minutes : minutes) + ':' + (seconds < 10 ? '0' + seconds : seconds);\n  }\n\n  function formatNumber(value, format, roundingFunction) {\n    var negP = false,\n        signed = false,\n        optDec = false,\n        abbr = '',\n        abbrK = false,\n        // force abbreviation to thousands\n    abbrM = false,\n        // force abbreviation to millions\n    abbrB = false,\n        // force abbreviation to billions\n    abbrT = false,\n        // force abbreviation to trillions\n    abbrForce = false,\n        // force abbreviation\n    abs,\n        min,\n        max,\n        power,\n        w,\n        precision,\n        thousands,\n        d = '',\n        neg = false;\n\n    if (value === null) {\n      value = 0;\n    }\n\n    abs = Math.abs(value); // see if we should use parentheses for negative number or if we should prefix with a sign\n    // if both are present we default to parentheses\n\n    if (format.indexOf('(') > -1) {\n      negP = true;\n      format = format.slice(1, -1);\n    } else if (format.indexOf('+') > -1) {\n      signed = true;\n      format = format.replace(/\\+/g, '');\n    } // see if abbreviation is wanted\n\n\n    if (format.indexOf('a') > -1) {\n      // check if abbreviation is specified\n      abbrK = format.indexOf('aK') >= 0;\n      abbrM = format.indexOf('aM') >= 0;\n      abbrB = format.indexOf('aB') >= 0;\n      abbrT = format.indexOf('aT') >= 0;\n      abbrForce = abbrK || abbrM || abbrB || abbrT; // check for space before abbreviation\n\n      if (format.indexOf(' a') > -1) {\n        abbr = ' ';\n      }\n\n      format = format.replace(new RegExp(abbr + 'a[KMBT]?'), '');\n\n      if (abs >= Math.pow(10, 12) && !abbrForce || abbrT) {\n        // trillion\n        abbr = abbr + languages[options.currentLanguage].abbreviations.trillion;\n        value = value / Math.pow(10, 12);\n      } else if (abs < Math.pow(10, 12) && abs >= Math.pow(10, 9) && !abbrForce || abbrB) {\n        // billion\n        abbr = abbr + languages[options.currentLanguage].abbreviations.billion;\n        value = value / Math.pow(10, 9);\n      } else if (abs < Math.pow(10, 9) && abs >= Math.pow(10, 6) && !abbrForce || abbrM) {\n        // million\n        abbr = abbr + languages[options.currentLanguage].abbreviations.million;\n        value = value / Math.pow(10, 6);\n      } else if (abs < Math.pow(10, 6) && abs >= Math.pow(10, 3) && !abbrForce || abbrK) {\n        // thousand\n        abbr = abbr + languages[options.currentLanguage].abbreviations.thousand;\n        value = value / Math.pow(10, 3);\n      }\n    }\n\n    if (format.indexOf('[.]') > -1) {\n      optDec = true;\n      format = format.replace('[.]', '.');\n    }\n\n    w = value.toString().split('.')[0];\n    precision = format.split('.')[1];\n    thousands = format.indexOf(',');\n\n    if (precision) {\n      if (precision.indexOf('[') > -1) {\n        precision = precision.replace(']', '');\n        precision = precision.split('[');\n        d = toFixed(value, precision[0].length + precision[1].length, roundingFunction, precision[1].length);\n      } else {\n        d = toFixed(value, precision.length, roundingFunction);\n      }\n\n      w = d.split('.')[0];\n\n      if (d.indexOf('.') > -1) {\n        d = languages[options.currentLanguage].delimiters.decimal + d.split('.')[1];\n      } else {\n        d = '';\n      }\n\n      if (optDec && Number(d.slice(1)) === 0) {\n        d = '';\n      }\n    } else {\n      w = toFixed(value, null, roundingFunction);\n    } // format number\n\n\n    if (w.indexOf('-') > -1) {\n      w = w.slice(1);\n      neg = true;\n    }\n\n    if (thousands > -1) {\n      w = w.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1' + languages[options.currentLanguage].delimiters.thousands);\n    }\n\n    if (format.indexOf('.') === 0) {\n      w = '';\n    }\n\n    return (negP && neg ? '(' : '') + (!negP && neg ? '-' : '') + (!neg && signed ? '+' : '') + w + d + (abbr ? abbr : '') + (negP && neg ? ')' : '');\n  }\n  /************************************\n      Unformatting\n  ************************************/\n  // revert to number\n\n\n  function unformatNumeral(n, string) {\n    var stringOriginal = string,\n        thousandRegExp,\n        millionRegExp,\n        billionRegExp,\n        trillionRegExp,\n        bytesMultiplier = false,\n        power,\n        value;\n\n    if (string.indexOf(':') > -1) {\n      value = unformatTime(string);\n    } else {\n      if (string === options.zeroFormat || string === options.nullFormat) {\n        value = 0;\n      } else {\n        if (languages[options.currentLanguage].delimiters.decimal !== '.') {\n          string = string.replace(/\\./g, '').replace(languages[options.currentLanguage].delimiters.decimal, '.');\n        } // see if abbreviations are there so that we can multiply to the correct number\n\n\n        thousandRegExp = new RegExp('[^a-zA-Z]' + languages[options.currentLanguage].abbreviations.thousand + '(?:\\\\)|(\\\\' + languages[options.currentLanguage].currency.symbol + ')?(?:\\\\))?)?$');\n        millionRegExp = new RegExp('[^a-zA-Z]' + languages[options.currentLanguage].abbreviations.million + '(?:\\\\)|(\\\\' + languages[options.currentLanguage].currency.symbol + ')?(?:\\\\))?)?$');\n        billionRegExp = new RegExp('[^a-zA-Z]' + languages[options.currentLanguage].abbreviations.billion + '(?:\\\\)|(\\\\' + languages[options.currentLanguage].currency.symbol + ')?(?:\\\\))?)?$');\n        trillionRegExp = new RegExp('[^a-zA-Z]' + languages[options.currentLanguage].abbreviations.trillion + '(?:\\\\)|(\\\\' + languages[options.currentLanguage].currency.symbol + ')?(?:\\\\))?)?$'); // see if bytes are there so that we can multiply to the correct number\n\n        for (power = 1; power <= byteSuffixes.bytes.length; power++) {\n          bytesMultiplier = string.indexOf(byteSuffixes.bytes[power]) > -1 || string.indexOf(byteSuffixes.iec[power]) > -1 ? Math.pow(1024, power) : false;\n\n          if (bytesMultiplier) {\n            break;\n          }\n        } // do some math to create our number\n\n\n        value = bytesMultiplier ? bytesMultiplier : 1;\n        value *= stringOriginal.match(thousandRegExp) ? Math.pow(10, 3) : 1;\n        value *= stringOriginal.match(millionRegExp) ? Math.pow(10, 6) : 1;\n        value *= stringOriginal.match(billionRegExp) ? Math.pow(10, 9) : 1;\n        value *= stringOriginal.match(trillionRegExp) ? Math.pow(10, 12) : 1; // check for percentage\n\n        value *= string.indexOf('%') > -1 ? 0.01 : 1; // check for negative number\n\n        value *= (string.split('-').length + Math.min(string.split('(').length - 1, string.split(')').length - 1)) % 2 ? 1 : -1; // remove non numbers\n\n        value *= Number(string.replace(/[^0-9\\.]+/g, '')); // round if we are talking about bytes\n\n        value = bytesMultiplier ? Math.ceil(value) : value;\n      }\n    }\n\n    n._value = value;\n    return n._value;\n  }\n\n  function unformatTime(string) {\n    var timeArray = string.split(':'),\n        seconds = 0; // turn hours and minutes into seconds and add them all up\n\n    if (timeArray.length === 3) {\n      // hours\n      seconds = seconds + Number(timeArray[0]) * 60 * 60; // minutes\n\n      seconds = seconds + Number(timeArray[1]) * 60; // seconds\n\n      seconds = seconds + Number(timeArray[2]);\n    } else if (timeArray.length === 2) {\n      // minutes\n      seconds = seconds + Number(timeArray[0]) * 60; // seconds\n\n      seconds = seconds + Number(timeArray[1]);\n    }\n\n    return Number(seconds);\n  }\n  /************************************\n      Top Level Functions\n  ************************************/\n\n\n  numeral = function (input) {\n    if (numeral.isNumeral(input)) {\n      input = input.value();\n    } else if (input === 0 || typeof input === 'undefined') {\n      input = 0;\n    } else if (input === null) {\n      input = null;\n    } else if (!Number(input)) {\n      input = numeral.fn.unformat(input);\n    } else {\n      input = Number(input);\n    }\n\n    return new Numeral(input);\n  }; // version number\n\n\n  numeral.version = VERSION; // compare numeral object\n\n  numeral.isNumeral = function (obj) {\n    return obj instanceof Numeral;\n  }; // This function will load languages and then set the global language.  If\n  // no arguments are passed in, it will simply return the current global\n  // language key.\n\n\n  numeral.language = function (key, values) {\n    if (!key) {\n      return options.currentLanguage;\n    }\n\n    key = key.toLowerCase();\n\n    if (key && !values) {\n      if (!languages[key]) {\n        throw new Error('Unknown language : ' + key);\n      }\n\n      options.currentLanguage = key;\n    }\n\n    if (values || !languages[key]) {\n      loadLanguage(key, values);\n    }\n\n    return numeral;\n  };\n\n  numeral.reset = function () {\n    for (var property in defaults) {\n      options[property] = defaults[property];\n    }\n  }; // This function provides access to the loaded language data.  If\n  // no arguments are passed in, it will simply return the current\n  // global language object.\n\n\n  numeral.languageData = function (key) {\n    if (!key) {\n      return languages[options.currentLanguage];\n    }\n\n    if (!languages[key]) {\n      throw new Error('Unknown language : ' + key);\n    }\n\n    return languages[key];\n  };\n\n  numeral.language('en', {\n    delimiters: {\n      thousands: ',',\n      decimal: '.'\n    },\n    abbreviations: {\n      thousand: 'k',\n      million: 'm',\n      billion: 'b',\n      trillion: 't'\n    },\n    ordinal: function (number) {\n      var b = number % 10;\n      return ~~(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';\n    },\n    currency: {\n      symbol: '$'\n    }\n  });\n\n  numeral.zeroFormat = function (format) {\n    options.zeroFormat = typeof format === 'string' ? format : null;\n  };\n\n  numeral.nullFormat = function (format) {\n    options.nullFormat = typeof format === 'string' ? format : null;\n  };\n\n  numeral.defaultFormat = function (format) {\n    options.defaultFormat = typeof format === 'string' ? format : '0.0';\n  };\n\n  numeral.validate = function (val, culture) {\n    var _decimalSep, _thousandSep, _currSymbol, _valArray, _abbrObj, _thousandRegEx, languageData, temp; //coerce val to string\n\n\n    if (typeof val !== 'string') {\n      val += '';\n\n      if (console.warn) {\n        console.warn('Numeral.js: Value is not string. It has been co-erced to: ', val);\n      }\n    } //trim whitespaces from either sides\n\n\n    val = val.trim(); //if val is just digits return true\n\n    if (!!val.match(/^\\d+$/)) {\n      return true;\n    } //if val is empty return false\n\n\n    if (val === '') {\n      return false;\n    } //get the decimal and thousands separator from numeral.languageData\n\n\n    try {\n      //check if the culture is understood by numeral. if not, default it to current language\n      languageData = numeral.languageData(culture);\n    } catch (e) {\n      languageData = numeral.languageData(numeral.language());\n    } //setup the delimiters and currency symbol based on culture/language\n\n\n    _currSymbol = languageData.currency.symbol;\n    _abbrObj = languageData.abbreviations;\n    _decimalSep = languageData.delimiters.decimal;\n\n    if (languageData.delimiters.thousands === '.') {\n      _thousandSep = '\\\\.';\n    } else {\n      _thousandSep = languageData.delimiters.thousands;\n    } // validating currency symbol\n\n\n    temp = val.match(/^[^\\d]+/);\n\n    if (temp !== null) {\n      val = val.substr(1);\n\n      if (temp[0] !== _currSymbol) {\n        return false;\n      }\n    } //validating abbreviation symbol\n\n\n    temp = val.match(/[^\\d]+$/);\n\n    if (temp !== null) {\n      val = val.slice(0, -1);\n\n      if (temp[0] !== _abbrObj.thousand && temp[0] !== _abbrObj.million && temp[0] !== _abbrObj.billion && temp[0] !== _abbrObj.trillion) {\n        return false;\n      }\n    }\n\n    _thousandRegEx = new RegExp(_thousandSep + '{2}');\n\n    if (!val.match(/[^\\d.,]/g)) {\n      _valArray = val.split(_decimalSep);\n\n      if (_valArray.length > 2) {\n        return false;\n      } else {\n        if (_valArray.length < 2) {\n          return !!_valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx);\n        } else {\n          if (_valArray[0].length === 1) {\n            return !!_valArray[0].match(/^\\d+$/) && !_valArray[0].match(_thousandRegEx) && !!_valArray[1].match(/^\\d+$/);\n          } else {\n            return !!_valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx) && !!_valArray[1].match(/^\\d+$/);\n          }\n        }\n      }\n    }\n\n    return false;\n  };\n  /************************************\n      Helpers\n  ************************************/\n\n\n  function loadLanguage(key, values) {\n    languages[key] = values;\n  }\n  /************************************\n      Floating-point helpers\n  ************************************/\n  // The floating-point helper functions and implementation\n  // borrows heavily from sinful.js: http://guipn.github.io/sinful.js/\n  // Production steps of ECMA-262, Edition 5, 15.4.4.21\n  // Reference: http://es5.github.io/#x15.4.4.21\n\n\n  if (!Array.prototype.reduce) {\n    Array.prototype.reduce = function (callback\n    /*, initialValue*/\n    ) {\n      'use strict';\n\n      if (this === null) {\n        throw new TypeError('Array.prototype.reduce called on null or undefined');\n      }\n\n      if (typeof callback !== 'function') {\n        throw new TypeError(callback + ' is not a function');\n      }\n\n      var t = Object(this),\n          len = t.length >>> 0,\n          k = 0,\n          value;\n\n      if (arguments.length === 2) {\n        value = arguments[1];\n      } else {\n        while (k < len && !(k in t)) {\n          k++;\n        }\n\n        if (k >= len) {\n          throw new TypeError('Reduce of empty array with no initial value');\n        }\n\n        value = t[k++];\n      }\n\n      for (; k < len; k++) {\n        if (k in t) {\n          value = callback(value, t[k], k, t);\n        }\n      }\n\n      return value;\n    };\n  }\n  /**\n   * Computes the multiplier necessary to make x >= 1,\n   * effectively eliminating miscalculations caused by\n   * finite precision.\n   */\n\n\n  function multiplier(x) {\n    var parts = x.toString().split('.');\n\n    if (parts.length < 2) {\n      return 1;\n    }\n\n    return Math.pow(10, parts[1].length);\n  }\n  /**\n   * Given a variable number of arguments, returns the maximum\n   * multiplier that must be used to normalize an operation involving\n   * all of them.\n   */\n\n\n  function correctionFactor() {\n    var args = Array.prototype.slice.call(arguments);\n    return args.reduce(function (prev, next) {\n      var mp = multiplier(prev),\n          mn = multiplier(next);\n      return mp > mn ? mp : mn;\n    }, -Infinity);\n  }\n  /************************************\n      Numeral Prototype\n  ************************************/\n\n\n  numeral.fn = Numeral.prototype = {\n    clone: function () {\n      return numeral(this);\n    },\n    format: function (inputString, roundingFunction) {\n      return formatNumeral(this, inputString ? inputString : options.defaultFormat, roundingFunction !== undefined ? roundingFunction : Math.round);\n    },\n    unformat: function (inputString) {\n      if (Object.prototype.toString.call(inputString) === '[object Number]') {\n        return inputString;\n      }\n\n      return unformatNumeral(this, inputString ? inputString : options.defaultFormat);\n    },\n    value: function () {\n      return this._value;\n    },\n    valueOf: function () {\n      return this._value;\n    },\n    set: function (value) {\n      this._value = Number(value);\n      return this;\n    },\n    add: function (value) {\n      var corrFactor = correctionFactor.call(null, this._value, value);\n\n      function cback(accum, curr, currI, O) {\n        return accum + corrFactor * curr;\n      }\n\n      this._value = [this._value, value].reduce(cback, 0) / corrFactor;\n      return this;\n    },\n    subtract: function (value) {\n      var corrFactor = correctionFactor.call(null, this._value, value);\n\n      function cback(accum, curr, currI, O) {\n        return accum - corrFactor * curr;\n      }\n\n      this._value = [value].reduce(cback, this._value * corrFactor) / corrFactor;\n      return this;\n    },\n    multiply: function (value) {\n      function cback(accum, curr, currI, O) {\n        var corrFactor = correctionFactor(accum, curr);\n        return accum * corrFactor * (curr * corrFactor) / (corrFactor * corrFactor);\n      }\n\n      this._value = [this._value, value].reduce(cback, 1);\n      return this;\n    },\n    divide: function (value) {\n      function cback(accum, curr, currI, O) {\n        var corrFactor = correctionFactor(accum, curr);\n        return accum * corrFactor / (curr * corrFactor);\n      }\n\n      this._value = [this._value, value].reduce(cback);\n      return this;\n    },\n    difference: function (value) {\n      return Math.abs(numeral(this._value).subtract(value).value());\n    }\n  };\n  /************************************\n      Exposing Numeral\n  ************************************/\n  // CommonJS module is defined\n\n  if (typeof module !== 'undefined' && module.exports) {\n    module.exports = numeral;\n  }\n  /*global ender:false */\n\n\n  if (typeof ender === 'undefined') {\n    // here, `this` means `window` in the browser, or `global` on the server\n    // add `numeral` as a global object via a string identifier,\n    // for Closure Compiler 'advanced' mode\n    this['numeral'] = numeral;\n  }\n  /*global define:false */\n\n\n  if (typeof define === 'function' && define.amd) {\n    define([], function () {\n      return numeral;\n    });\n  }\n}).call(this);","map":{"version":3,"sources":["/home/ma/soulmed-healthcare/node_modules/numeral/numeral.js"],"names":["numeral","VERSION","languages","defaults","currentLanguage","zeroFormat","nullFormat","defaultFormat","options","byteSuffixes","bytes","iec","Numeral","number","_value","toFixed","value","maxDecimals","roundingFunction","optionals","splitValue","toString","split","minDecimals","boundedPrecision","optionalsRegExp","power","output","length","Math","min","max","pow","RegExp","replace","formatNumeral","n","format","indexOf","formatCurrency","formatPercentage","formatTime","formatBytes","formatOrdinal","formatNumber","symbolIndex","openParenIndex","minusSignIndex","space","spliceIndex","splice","currency","symbol","join","suffixes","suffix","ordinal","hours","floor","minutes","seconds","round","negP","signed","optDec","abbr","abbrK","abbrM","abbrB","abbrT","abbrForce","abs","w","precision","thousands","d","neg","slice","abbreviations","trillion","billion","million","thousand","delimiters","decimal","Number","unformatNumeral","string","stringOriginal","thousandRegExp","millionRegExp","billionRegExp","trillionRegExp","bytesMultiplier","unformatTime","match","ceil","timeArray","input","isNumeral","fn","unformat","version","obj","language","key","values","toLowerCase","Error","loadLanguage","reset","property","languageData","b","validate","val","culture","_decimalSep","_thousandSep","_currSymbol","_valArray","_abbrObj","_thousandRegEx","temp","console","warn","trim","e","substr","Array","prototype","reduce","callback","TypeError","t","Object","len","k","arguments","multiplier","x","parts","correctionFactor","args","call","prev","next","mp","mn","Infinity","clone","inputString","undefined","valueOf","set","add","corrFactor","cback","accum","curr","currI","O","subtract","multiply","divide","difference","module","exports","ender","define","amd"],"mappings":"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","sourcesContent":["/*! @preserve\n * numeral.js\n * version : 1.5.6\n * author : Adam Draper\n * license : MIT\n * http://adamwdraper.github.com/Numeral-js/\n */\n\n(function() {\n\n    /************************************\n        Variables\n    ************************************/\n\n    var numeral,\n        VERSION = '1.5.6',\n        // internal storage for language config files\n        languages = {},\n        defaults = {\n            currentLanguage: 'en',\n            zeroFormat: null,\n            nullFormat: null,\n            defaultFormat: '0,0'\n        },\n        options = {\n            currentLanguage: defaults.currentLanguage,\n            zeroFormat: defaults.zeroFormat,\n            nullFormat: defaults.nullFormat,\n            defaultFormat: defaults.defaultFormat\n        },\n        byteSuffixes = {\n            bytes: ['B','KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],\n            iec: ['B','KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']\n        };\n\n\n    /************************************\n        Constructors\n    ************************************/\n\n\n    // Numeral prototype object\n    function Numeral(number) {\n        this._value = number;\n    }\n\n    /**\n     * Implementation of toFixed() that treats floats more like decimals\n     *\n     * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present\n     * problems for accounting- and finance-related software.\n     */\n    function toFixed (value, maxDecimals, roundingFunction, optionals) {\n        var splitValue = value.toString().split('.'),\n            minDecimals = maxDecimals - (optionals || 0),\n            boundedPrecision,\n            optionalsRegExp,\n            power,\n            output;\n\n        // Use the smallest precision value possible to avoid errors from floating point representation\n        if (splitValue.length === 2) {\n          boundedPrecision = Math.min(Math.max(splitValue[1].length, minDecimals), maxDecimals);\n        } else {\n          boundedPrecision = minDecimals;\n        }\n\n        power = Math.pow(10, boundedPrecision);\n\n        //roundingFunction = (roundingFunction !== undefined ? roundingFunction : Math.round);\n        // Multiply up by precision, round accurately, then divide and use native toFixed():\n        output = (roundingFunction(value * power) / power).toFixed(boundedPrecision);\n\n        if (optionals > maxDecimals - boundedPrecision) {\n            optionalsRegExp = new RegExp('\\\\.?0{1,' + (optionals - (maxDecimals - boundedPrecision)) + '}$');\n            output = output.replace(optionalsRegExp, '');\n        }\n\n        return output;\n    }\n\n    /************************************\n        Formatting\n    ************************************/\n\n    // determine what type of formatting we need to do\n    function formatNumeral(n, format, roundingFunction) {\n        var output;\n\n        if (n._value === 0 && options.zeroFormat !== null) {\n            output = options.zeroFormat;\n        } else if (n._value === null && options.nullFormat !== null) {\n            output = options.nullFormat;\n        } else {\n            // figure out what kind of format we are dealing with\n            if (format.indexOf('$') > -1) {\n                output = formatCurrency(n, format, roundingFunction);\n            } else if (format.indexOf('%') > -1) {\n                output = formatPercentage(n, format, roundingFunction);\n            } else if (format.indexOf(':') > -1) {\n                output = formatTime(n, format);\n            } else if (format.indexOf('b') > -1 || format.indexOf('ib') > -1) {\n                output = formatBytes(n, format, roundingFunction);\n            } else if (format.indexOf('o') > -1) {\n                output = formatOrdinal(n, format, roundingFunction);\n            } else {\n                output = formatNumber(n._value, format, roundingFunction);\n            }\n        }\n\n        return output;\n    }\n\n    function formatCurrency(n, format, roundingFunction) {\n        var symbolIndex = format.indexOf('$'),\n            openParenIndex = format.indexOf('('),\n            minusSignIndex = format.indexOf('-'),\n            space = '',\n            spliceIndex,\n            output;\n\n        // check for space before or after currency\n        if (format.indexOf(' $') > -1) {\n            space = ' ';\n            format = format.replace(' $', '');\n        } else if (format.indexOf('$ ') > -1) {\n            space = ' ';\n            format = format.replace('$ ', '');\n        } else {\n            format = format.replace('$', '');\n        }\n\n        // format the number\n        output = formatNumber(n._value, format, roundingFunction, false);\n\n        // position the symbol\n        if (symbolIndex <= 1) {\n            if (output.indexOf('(') > -1 || output.indexOf('-') > -1) {\n                output = output.split('');\n                spliceIndex = 1;\n                if (symbolIndex < openParenIndex || symbolIndex < minusSignIndex) {\n                    // the symbol appears before the \"(\" or \"-\"\n                    spliceIndex = 0;\n                }\n                output.splice(spliceIndex, 0, languages[options.currentLanguage].currency.symbol + space);\n                output = output.join('');\n            } else {\n                output = languages[options.currentLanguage].currency.symbol + space + output;\n            }\n        } else {\n            if (output.indexOf(')') > -1) {\n                output = output.split('');\n                output.splice(-1, 0, space + languages[options.currentLanguage].currency.symbol);\n                output = output.join('');\n            } else {\n                output = output + space + languages[options.currentLanguage].currency.symbol;\n            }\n        }\n\n        return output;\n    }\n\n    function formatPercentage(n, format, roundingFunction) {\n        var space = '',\n            output,\n            value = n._value * 100;\n\n        // check for space before %\n        if (format.indexOf(' %') > -1) {\n            space = ' ';\n            format = format.replace(' %', '');\n        } else {\n            format = format.replace('%', '');\n        }\n\n        output = formatNumber(value, format, roundingFunction);\n\n        if (output.indexOf(')') > -1) {\n            output = output.split('');\n            output.splice(-1, 0, space + '%');\n            output = output.join('');\n        } else {\n            output = output + space + '%';\n        }\n\n        return output;\n    }\n\n    function formatBytes(n, format, roundingFunction) {\n        var output,\n            suffixes = format.indexOf('ib') > -1 ? byteSuffixes.iec : byteSuffixes.bytes,\n            value = n._value,\n            suffix = '',\n            power,\n            min,\n            max;\n\n        // check for space before\n        if (format.indexOf(' b') > -1 || format.indexOf(' ib') > -1) {\n            suffix = ' ';\n            format = format.replace(' ib', '').replace(' b', '');\n        } else {\n            format = format.replace('ib', '').replace('b', '');\n        }\n\n        for (power = 0; power <= suffixes.length; power++) {\n            min = Math.pow(1024, power);\n            max = Math.pow(1024, power + 1);\n\n            if (value === null || value === 0 || value >= min && value < max) {\n                suffix += suffixes[power];\n\n                if (min > 0) {\n                    value = value / min;\n                }\n\n                break;\n            }\n        }\n\n        output = formatNumber(value, format, roundingFunction);\n\n        return output + suffix;\n    }\n\n    function formatOrdinal(n, format, roundingFunction) {\n        var output,\n            ordinal = '';\n\n        // check for space before\n        if (format.indexOf(' o') > -1) {\n            ordinal = ' ';\n            format = format.replace(' o', '');\n        } else {\n            format = format.replace('o', '');\n        }\n\n        ordinal += languages[options.currentLanguage].ordinal(n._value);\n\n        output = formatNumber(n._value, format, roundingFunction);\n\n        return output + ordinal;\n    }\n\n    function formatTime(n) {\n        var hours = Math.floor(n._value / 60 / 60),\n            minutes = Math.floor((n._value - (hours * 60 * 60)) / 60),\n            seconds = Math.round(n._value - (hours * 60 * 60) - (minutes * 60));\n\n        return hours + ':' + ((minutes < 10) ? '0' + minutes : minutes) + ':' + ((seconds < 10) ? '0' + seconds : seconds);\n    }\n\n    function formatNumber(value, format, roundingFunction) {\n        var negP = false,\n            signed = false,\n            optDec = false,\n            abbr = '',\n            abbrK = false, // force abbreviation to thousands\n            abbrM = false, // force abbreviation to millions\n            abbrB = false, // force abbreviation to billions\n            abbrT = false, // force abbreviation to trillions\n            abbrForce = false, // force abbreviation\n            abs,\n            min,\n            max,\n            power,\n            w,\n            precision,\n            thousands,\n            d = '',\n            neg = false;\n\n        if (value === null) {\n            value = 0;\n        }\n\n        abs = Math.abs(value);\n\n        // see if we should use parentheses for negative number or if we should prefix with a sign\n        // if both are present we default to parentheses\n        if (format.indexOf('(') > -1) {\n            negP = true;\n            format = format.slice(1, -1);\n        } else if (format.indexOf('+') > -1) {\n            signed = true;\n            format = format.replace(/\\+/g, '');\n        }\n\n        // see if abbreviation is wanted\n        if (format.indexOf('a') > -1) {\n            // check if abbreviation is specified\n            abbrK = format.indexOf('aK') >= 0;\n            abbrM = format.indexOf('aM') >= 0;\n            abbrB = format.indexOf('aB') >= 0;\n            abbrT = format.indexOf('aT') >= 0;\n            abbrForce = abbrK || abbrM || abbrB || abbrT;\n\n            // check for space before abbreviation\n            if (format.indexOf(' a') > -1) {\n                abbr = ' ';\n            }\n\n            format = format.replace(new RegExp(abbr + 'a[KMBT]?'), '');\n\n            if (abs >= Math.pow(10, 12) && !abbrForce || abbrT) {\n                // trillion\n                abbr = abbr + languages[options.currentLanguage].abbreviations.trillion;\n                value = value / Math.pow(10, 12);\n            } else if (abs < Math.pow(10, 12) && abs >= Math.pow(10, 9) && !abbrForce || abbrB) {\n                // billion\n                abbr = abbr + languages[options.currentLanguage].abbreviations.billion;\n                value = value / Math.pow(10, 9);\n            } else if (abs < Math.pow(10, 9) && abs >= Math.pow(10, 6) && !abbrForce || abbrM) {\n                // million\n                abbr = abbr + languages[options.currentLanguage].abbreviations.million;\n                value = value / Math.pow(10, 6);\n            } else if (abs < Math.pow(10, 6) && abs >= Math.pow(10, 3) && !abbrForce || abbrK) {\n                // thousand\n                abbr = abbr + languages[options.currentLanguage].abbreviations.thousand;\n                value = value / Math.pow(10, 3);\n            }\n        }\n\n\n        if (format.indexOf('[.]') > -1) {\n            optDec = true;\n            format = format.replace('[.]', '.');\n        }\n\n        w = value.toString().split('.')[0];\n        precision = format.split('.')[1];\n        thousands = format.indexOf(',');\n\n        if (precision) {\n            if (precision.indexOf('[') > -1) {\n                precision = precision.replace(']', '');\n                precision = precision.split('[');\n                d = toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);\n            } else {\n                d = toFixed(value, precision.length, roundingFunction);\n            }\n\n            w = d.split('.')[0];\n\n            if (d.indexOf('.') > -1) {\n                d = languages[options.currentLanguage].delimiters.decimal + d.split('.')[1];\n            } else {\n                d = '';\n            }\n\n            if (optDec && Number(d.slice(1)) === 0) {\n                d = '';\n            }\n        } else {\n            w = toFixed(value, null, roundingFunction);\n        }\n\n        // format number\n        if (w.indexOf('-') > -1) {\n            w = w.slice(1);\n            neg = true;\n        }\n\n        if (thousands > -1) {\n            w = w.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1' + languages[options.currentLanguage].delimiters.thousands);\n        }\n\n        if (format.indexOf('.') === 0) {\n            w = '';\n        }\n\n        return ((negP && neg) ? '(' : '') + ((!negP && neg) ? '-' : '') + ((!neg && signed) ? '+' : '') + w + d + ((abbr) ? abbr : '') + ((negP && neg) ? ')' : '');\n    }\n\n\n    /************************************\n        Unformatting\n    ************************************/\n\n    // revert to number\n    function unformatNumeral(n, string) {\n        var stringOriginal = string,\n            thousandRegExp,\n            millionRegExp,\n            billionRegExp,\n            trillionRegExp,\n            bytesMultiplier = false,\n            power,\n            value;\n\n        if (string.indexOf(':') > -1) {\n            value = unformatTime(string);\n        } else {\n            if (string === options.zeroFormat || string === options.nullFormat) {\n                value = 0;\n            } else {\n                if (languages[options.currentLanguage].delimiters.decimal !== '.') {\n                    string = string.replace(/\\./g, '').replace(languages[options.currentLanguage].delimiters.decimal, '.');\n                }\n\n                // see if abbreviations are there so that we can multiply to the correct number\n                thousandRegExp = new RegExp('[^a-zA-Z]' + languages[options.currentLanguage].abbreviations.thousand + '(?:\\\\)|(\\\\' + languages[options.currentLanguage].currency.symbol + ')?(?:\\\\))?)?$');\n                millionRegExp = new RegExp('[^a-zA-Z]' + languages[options.currentLanguage].abbreviations.million + '(?:\\\\)|(\\\\' + languages[options.currentLanguage].currency.symbol + ')?(?:\\\\))?)?$');\n                billionRegExp = new RegExp('[^a-zA-Z]' + languages[options.currentLanguage].abbreviations.billion + '(?:\\\\)|(\\\\' + languages[options.currentLanguage].currency.symbol + ')?(?:\\\\))?)?$');\n                trillionRegExp = new RegExp('[^a-zA-Z]' + languages[options.currentLanguage].abbreviations.trillion + '(?:\\\\)|(\\\\' + languages[options.currentLanguage].currency.symbol + ')?(?:\\\\))?)?$');\n\n                // see if bytes are there so that we can multiply to the correct number\n                for (power = 1; power <= byteSuffixes.bytes.length; power++) {\n                    bytesMultiplier = ((string.indexOf(byteSuffixes.bytes[power]) > -1) || (string.indexOf(byteSuffixes.iec[power]) > -1))? Math.pow(1024, power) : false;\n\n                    if (bytesMultiplier) {\n                        break;\n                    }\n                }\n\n                // do some math to create our number\n                value = bytesMultiplier ? bytesMultiplier : 1;\n                value *= stringOriginal.match(thousandRegExp) ? Math.pow(10, 3) : 1;\n                value *= stringOriginal.match(millionRegExp) ? Math.pow(10, 6) : 1;\n                value *= stringOriginal.match(billionRegExp) ? Math.pow(10, 9) : 1;\n                value *= stringOriginal.match(trillionRegExp) ? Math.pow(10, 12) : 1;\n                // check for percentage\n                value *= string.indexOf('%') > -1 ? 0.01 : 1;\n                // check for negative number\n                value *= (string.split('-').length + Math.min(string.split('(').length - 1, string.split(')').length - 1)) % 2 ? 1 : -1;\n                // remove non numbers\n                value *= Number(string.replace(/[^0-9\\.]+/g, ''));\n                // round if we are talking about bytes\n                value = bytesMultiplier ? Math.ceil(value) : value;\n            }\n        }\n\n        n._value = value;\n\n        return n._value;\n    }\n    function unformatTime(string) {\n        var timeArray = string.split(':'),\n            seconds = 0;\n        // turn hours and minutes into seconds and add them all up\n        if (timeArray.length === 3) {\n            // hours\n            seconds = seconds + (Number(timeArray[0]) * 60 * 60);\n            // minutes\n            seconds = seconds + (Number(timeArray[1]) * 60);\n            // seconds\n            seconds = seconds + Number(timeArray[2]);\n        } else if (timeArray.length === 2) {\n            // minutes\n            seconds = seconds + (Number(timeArray[0]) * 60);\n            // seconds\n            seconds = seconds + Number(timeArray[1]);\n        }\n        return Number(seconds);\n    }\n\n\n    /************************************\n        Top Level Functions\n    ************************************/\n\n    numeral = function(input) {\n        if (numeral.isNumeral(input)) {\n            input = input.value();\n        } else if (input === 0 || typeof input === 'undefined') {\n            input = 0;\n        } else if (input === null) {\n            input = null;\n        } else if (!Number(input)) {\n            input = numeral.fn.unformat(input);\n        } else {\n            input = Number(input);\n        }\n\n        return new Numeral(input);\n    };\n\n    // version number\n    numeral.version = VERSION;\n\n    // compare numeral object\n    numeral.isNumeral = function(obj) {\n        return obj instanceof Numeral;\n    };\n\n\n    // This function will load languages and then set the global language.  If\n    // no arguments are passed in, it will simply return the current global\n    // language key.\n    numeral.language = function(key, values) {\n        if (!key) {\n            return options.currentLanguage;\n        }\n\n        key = key.toLowerCase();\n\n        if (key && !values) {\n            if (!languages[key]) {\n                throw new Error('Unknown language : ' + key);\n            }\n\n            options.currentLanguage = key;\n        }\n\n        if (values || !languages[key]) {\n            loadLanguage(key, values);\n        }\n\n        return numeral;\n    };\n\n    numeral.reset = function() {\n        for (var property in defaults) {\n            options[property] = defaults[property];\n        }\n    };\n\n    // This function provides access to the loaded language data.  If\n    // no arguments are passed in, it will simply return the current\n    // global language object.\n    numeral.languageData = function(key) {\n        if (!key) {\n            return languages[options.currentLanguage];\n        }\n\n        if (!languages[key]) {\n            throw new Error('Unknown language : ' + key);\n        }\n\n        return languages[key];\n    };\n\n    numeral.language('en', {\n        delimiters: {\n            thousands: ',',\n            decimal: '.'\n        },\n        abbreviations: {\n            thousand: 'k',\n            million: 'm',\n            billion: 'b',\n            trillion: 't'\n        },\n        ordinal: function(number) {\n            var b = number % 10;\n            return (~~(number % 100 / 10) === 1) ? 'th' :\n                (b === 1) ? 'st' :\n                (b === 2) ? 'nd' :\n                (b === 3) ? 'rd' : 'th';\n        },\n        currency: {\n            symbol: '$'\n        }\n    });\n\n    numeral.zeroFormat = function(format) {\n        options.zeroFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.nullFormat = function (format) {\n        options.nullFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numeral.defaultFormat = function(format) {\n        options.defaultFormat = typeof(format) === 'string' ? format : '0.0';\n    };\n\n    numeral.validate = function(val, culture) {\n        var _decimalSep,\n            _thousandSep,\n            _currSymbol,\n            _valArray,\n            _abbrObj,\n            _thousandRegEx,\n            languageData,\n            temp;\n\n        //coerce val to string\n        if (typeof val !== 'string') {\n            val += '';\n            if (console.warn) {\n                console.warn('Numeral.js: Value is not string. It has been co-erced to: ', val);\n            }\n        }\n\n        //trim whitespaces from either sides\n        val = val.trim();\n\n        //if val is just digits return true\n        if ( !! val.match(/^\\d+$/)) {\n            return true;\n        }\n\n        //if val is empty return false\n        if (val === '') {\n            return false;\n        }\n\n        //get the decimal and thousands separator from numeral.languageData\n        try {\n            //check if the culture is understood by numeral. if not, default it to current language\n            languageData = numeral.languageData(culture);\n        } catch (e) {\n            languageData = numeral.languageData(numeral.language());\n        }\n\n        //setup the delimiters and currency symbol based on culture/language\n        _currSymbol = languageData.currency.symbol;\n        _abbrObj = languageData.abbreviations;\n        _decimalSep = languageData.delimiters.decimal;\n        if (languageData.delimiters.thousands === '.') {\n            _thousandSep = '\\\\.';\n        } else {\n            _thousandSep = languageData.delimiters.thousands;\n        }\n\n        // validating currency symbol\n        temp = val.match(/^[^\\d]+/);\n        if (temp !== null) {\n            val = val.substr(1);\n            if (temp[0] !== _currSymbol) {\n                return false;\n            }\n        }\n\n        //validating abbreviation symbol\n        temp = val.match(/[^\\d]+$/);\n        if (temp !== null) {\n            val = val.slice(0, -1);\n            if (temp[0] !== _abbrObj.thousand && temp[0] !== _abbrObj.million && temp[0] !== _abbrObj.billion && temp[0] !== _abbrObj.trillion) {\n                return false;\n            }\n        }\n\n        _thousandRegEx = new RegExp(_thousandSep + '{2}');\n\n        if (!val.match(/[^\\d.,]/g)) {\n            _valArray = val.split(_decimalSep);\n            if (_valArray.length > 2) {\n                return false;\n            } else {\n                if (_valArray.length < 2) {\n                    return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx));\n                } else {\n                    if (_valArray[0].length === 1) {\n                        return ( !! _valArray[0].match(/^\\d+$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    } else {\n                        return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx) && !! _valArray[1].match(/^\\d+$/));\n                    }\n                }\n            }\n        }\n\n        return false;\n    };\n\n    /************************************\n        Helpers\n    ************************************/\n\n    function loadLanguage(key, values) {\n        languages[key] = values;\n    }\n\n    /************************************\n        Floating-point helpers\n    ************************************/\n\n    // The floating-point helper functions and implementation\n    // borrows heavily from sinful.js: http://guipn.github.io/sinful.js/\n\n    // Production steps of ECMA-262, Edition 5, 15.4.4.21\n    // Reference: http://es5.github.io/#x15.4.4.21\n    if (!Array.prototype.reduce) {\n        Array.prototype.reduce = function(callback /*, initialValue*/) {\n            'use strict';\n            if (this === null) {\n                throw new TypeError('Array.prototype.reduce called on null or undefined');\n            }\n\n            if (typeof callback !== 'function') {\n                throw new TypeError(callback + ' is not a function');\n            }\n\n            var t = Object(this), len = t.length >>> 0, k = 0, value;\n\n            if (arguments.length === 2) {\n                value = arguments[1];\n            } else {\n                while (k < len && !(k in t)) {\n                    k++;\n                }\n\n                if (k >= len) {\n                    throw new TypeError('Reduce of empty array with no initial value');\n                }\n\n                value = t[k++];\n            }\n            for (; k < len; k++) {\n                if (k in t) {\n                    value = callback(value, t[k], k, t);\n                }\n            }\n            return value;\n        };\n    }\n\n    /**\n     * Computes the multiplier necessary to make x >= 1,\n     * effectively eliminating miscalculations caused by\n     * finite precision.\n     */\n    function multiplier(x) {\n        var parts = x.toString().split('.');\n        if (parts.length < 2) {\n            return 1;\n        }\n        return Math.pow(10, parts[1].length);\n    }\n\n    /**\n     * Given a variable number of arguments, returns the maximum\n     * multiplier that must be used to normalize an operation involving\n     * all of them.\n     */\n    function correctionFactor() {\n        var args = Array.prototype.slice.call(arguments);\n        return args.reduce(function(prev, next) {\n            var mp = multiplier(prev),\n                mn = multiplier(next);\n            return mp > mn ? mp : mn;\n        }, -Infinity);\n    }\n\n\n    /************************************\n        Numeral Prototype\n    ************************************/\n\n\n    numeral.fn = Numeral.prototype = {\n\n        clone: function() {\n            return numeral(this);\n        },\n\n        format: function (inputString, roundingFunction) {\n            return formatNumeral(this,\n                inputString ? inputString : options.defaultFormat,\n                roundingFunction !== undefined ? roundingFunction : Math.round\n            );\n        },\n\n        unformat: function (inputString) {\n            if (Object.prototype.toString.call(inputString) === '[object Number]') {\n                return inputString;\n            }\n\n            return unformatNumeral(this, inputString ? inputString : options.defaultFormat);\n        },\n\n        value: function() {\n            return this._value;\n        },\n\n        valueOf: function() {\n            return this._value;\n        },\n\n        set: function(value) {\n            this._value = Number(value);\n            return this;\n        },\n\n        add: function(value) {\n            var corrFactor = correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum + corrFactor * curr;\n            }\n            this._value = [this._value, value].reduce(cback, 0) / corrFactor;\n            return this;\n        },\n\n        subtract: function(value) {\n            var corrFactor = correctionFactor.call(null, this._value, value);\n\n            function cback(accum, curr, currI, O) {\n                return accum - corrFactor * curr;\n            }\n            this._value = [value].reduce(cback, this._value * corrFactor) / corrFactor;\n            return this;\n        },\n\n        multiply: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = correctionFactor(accum, curr);\n                return (accum * corrFactor) * (curr * corrFactor) /\n                    (corrFactor * corrFactor);\n            }\n            this._value = [this._value, value].reduce(cback, 1);\n            return this;\n        },\n\n        divide: function(value) {\n            function cback(accum, curr, currI, O) {\n                var corrFactor = correctionFactor(accum, curr);\n                return (accum * corrFactor) / (curr * corrFactor);\n            }\n            this._value = [this._value, value].reduce(cback);\n            return this;\n        },\n\n        difference: function(value) {\n            return Math.abs(numeral(this._value).subtract(value).value());\n        }\n\n    };\n\n    /************************************\n        Exposing Numeral\n    ************************************/\n\n    // CommonJS module is defined\n    if (typeof module !== 'undefined' && module.exports) {\n        module.exports = numeral;\n    }\n\n    /*global ender:false */\n    if (typeof ender === 'undefined') {\n        // here, `this` means `window` in the browser, or `global` on the server\n        // add `numeral` as a global object via a string identifier,\n        // for Closure Compiler 'advanced' mode\n        this['numeral'] = numeral;\n    }\n\n    /*global define:false */\n    if (typeof define === 'function' && define.amd) {\n        define([], function() {\n            return numeral;\n        });\n    }\n}).call(this);\n"]},"metadata":{},"sourceType":"script"}