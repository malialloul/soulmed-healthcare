{"ast":null,"code":"'use strict';\n\nconst countries_data = require('./db/countries_data.json'),\n      alpha2ToCountryMap = require('./db/alpha2ToCountryMap.json'),\n      alpha3ToCountryMap = require('./db/alpha3ToCountryMap.json'),\n      alpha2ToAlpha3Map = require('./db/alpha2ToAlpha3.json'),\n      alpha3ToAlpha2Map = require('./db/alpha3ToAlpha2.json'),\n      wrongInputErrorMsg = 'Wrong Country Code Input';\n\nexports.allCountriesList = () => {\n  return countries_data;\n};\n\nexports.getAllAlphaTwoCodes = () => {\n  const alpha2countries = require('./db/alpha2.json');\n\n  return alpha2countries;\n};\n\nexports.getAllAlphaThreeCodes = () => {\n  const alpha3countries = require('./db/alpha3.json');\n\n  return alpha3countries;\n};\n\nexports.getCountry = countryCode => {\n  countryCode = countryCode ? countryCode.toUpperCase() : null;\n\n  if (isAlphaTwo(countryCode)) {\n    return alpha2ToCountryMap[countryCode] || wrongInputErrorMsg;\n  }\n\n  return alpha3ToCountryMap[countryCode] || wrongInputErrorMsg;\n};\n\nexports.convertAlphaCode = countryCode => {\n  countryCode = countryCode ? countryCode.toUpperCase() : null;\n\n  if (isAlphaTwo(countryCode)) {\n    return alpha2ToAlpha3Map[countryCode] || wrongInputErrorMsg;\n  }\n\n  return alpha3ToAlpha2Map[countryCode] || wrongInputErrorMsg;\n};\n\nfunction isAlphaTwo(countryCode) {\n  return countryCode && countryCode.length === 2;\n}","map":{"version":3,"sources":["/home/ma/soulmed-healthcare/node_modules/countries-code/countries_code.js"],"names":["countries_data","require","alpha2ToCountryMap","alpha3ToCountryMap","alpha2ToAlpha3Map","alpha3ToAlpha2Map","wrongInputErrorMsg","exports","allCountriesList","getAllAlphaTwoCodes","alpha2countries","getAllAlphaThreeCodes","alpha3countries","getCountry","countryCode","toUpperCase","isAlphaTwo","convertAlphaCode","length"],"mappings":"AAAA;;AAEA,MAAMA,cAAc,GAAGC,OAAO,CAAC,0BAAD,CAA9B;AAAA,MACIC,kBAAkB,GAAGD,OAAO,CAAC,8BAAD,CADhC;AAAA,MAEIE,kBAAkB,GAAGF,OAAO,CAAC,8BAAD,CAFhC;AAAA,MAGIG,iBAAiB,GAAGH,OAAO,CAAC,0BAAD,CAH/B;AAAA,MAIII,iBAAiB,GAAGJ,OAAO,CAAC,0BAAD,CAJ/B;AAAA,MAKIK,kBAAkB,GAAG,0BALzB;;AAOAC,OAAO,CAACC,gBAAR,GAA2B,MAAM;AAC7B,SAAOR,cAAP;AACH,CAFD;;AAIAO,OAAO,CAACE,mBAAR,GAA8B,MAAM;AAChC,QAAMC,eAAe,GAAGT,OAAO,CAAC,kBAAD,CAA/B;;AACA,SAAOS,eAAP;AACH,CAHD;;AAKAH,OAAO,CAACI,qBAAR,GAAgC,MAAM;AAClC,QAAMC,eAAe,GAAGX,OAAO,CAAC,kBAAD,CAA/B;;AACA,SAAOW,eAAP;AACH,CAHD;;AAKAL,OAAO,CAACM,UAAR,GAAqBC,WAAW,IAAI;AAChCA,EAAAA,WAAW,GAAGA,WAAW,GAAGA,WAAW,CAACC,WAAZ,EAAH,GAA+B,IAAxD;;AACA,MAAIC,UAAU,CAACF,WAAD,CAAd,EAA6B;AACzB,WAAOZ,kBAAkB,CAACY,WAAD,CAAlB,IAAmCR,kBAA1C;AACH;;AACD,SAAOH,kBAAkB,CAACW,WAAD,CAAlB,IAAmCR,kBAA1C;AACH,CAND;;AAQAC,OAAO,CAACU,gBAAR,GAA2BH,WAAW,IAAI;AACtCA,EAAAA,WAAW,GAAGA,WAAW,GAAGA,WAAW,CAACC,WAAZ,EAAH,GAA+B,IAAxD;;AACA,MAAIC,UAAU,CAACF,WAAD,CAAd,EAA6B;AACzB,WAAOV,iBAAiB,CAACU,WAAD,CAAjB,IAAkCR,kBAAzC;AACH;;AACD,SAAOD,iBAAiB,CAACS,WAAD,CAAjB,IAAkCR,kBAAzC;AACH,CAND;;AAQA,SAASU,UAAT,CAAoBF,WAApB,EAAiC;AAC7B,SAAOA,WAAW,IAAIA,WAAW,CAACI,MAAZ,KAAuB,CAA7C;AACH","sourcesContent":["'use strict';\n\nconst countries_data = require('./db/countries_data.json'),\n    alpha2ToCountryMap = require('./db/alpha2ToCountryMap.json'),\n    alpha3ToCountryMap = require('./db/alpha3ToCountryMap.json'),\n    alpha2ToAlpha3Map = require('./db/alpha2ToAlpha3.json'),\n    alpha3ToAlpha2Map = require('./db/alpha3ToAlpha2.json'),\n    wrongInputErrorMsg = 'Wrong Country Code Input';\n\nexports.allCountriesList = () => {\n    return countries_data;\n};\n\nexports.getAllAlphaTwoCodes = () => {\n    const alpha2countries = require('./db/alpha2.json');\n    return alpha2countries;\n};\n\nexports.getAllAlphaThreeCodes = () => {\n    const alpha3countries = require('./db/alpha3.json');\n    return alpha3countries;\n};\n\nexports.getCountry = countryCode => {\n    countryCode = countryCode ? countryCode.toUpperCase() : null;\n    if (isAlphaTwo(countryCode)) {\n        return alpha2ToCountryMap[countryCode] || wrongInputErrorMsg;\n    }\n    return alpha3ToCountryMap[countryCode] || wrongInputErrorMsg;\n};\n\nexports.convertAlphaCode = countryCode => {\n    countryCode = countryCode ? countryCode.toUpperCase() : null;\n    if (isAlphaTwo(countryCode)) {\n        return alpha2ToAlpha3Map[countryCode] || wrongInputErrorMsg;\n    }\n    return alpha3ToAlpha2Map[countryCode] || wrongInputErrorMsg;\n};\n\nfunction isAlphaTwo(countryCode) {\n    return countryCode && countryCode.length === 2;\n}"]},"metadata":{},"sourceType":"script"}