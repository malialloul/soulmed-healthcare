{"ast":null,"code":"var _jsxFileName = \"/home/ma/soulmed-healthcare/src/inputs/calendar.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport FullCalendar from \"@fullcalendar/react\"; // must go before plugins\n\nimport dayGridPlugin from \"@fullcalendar/daygrid\"; // a plugin!\n\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Calendar = ({ ...props\n}) => {\n  _s();\n\n  const [events, setEvents] = useState([]);\n  useEffect(() => {\n    setEvents(props.events);\n  }, [props.events]);\n\n  const handleDateSelect = selectInfo => {\n    let title = prompt(\"Please enter a new title for your event\");\n    let calendarApi = selectInfo.view.calendar;\n    calendarApi.unselect(); // clear date selection\n\n    if (title) {\n      calendarApi.addEvent({\n        id: 1,\n        title,\n        start: selectInfo.startStr,\n        end: selectInfo.endStr,\n        allDay: selectInfo.allDay\n      });\n    }\n  };\n\n  const handleEventClick = clickInfo => {\n    if (window.confirm(`Are you sure you want to delete the event '${clickInfo.event.title}'`)) {\n      clickInfo.event.remove();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(FullCalendar, {\n    editable: true,\n    initialView: \"dayGridMonth\",\n    selectable: true,\n    select: handleDateSelect,\n    selectMirror: true,\n    plugins: [dayGridPlugin],\n    weekends: false,\n    events: events,\n    eventClick: handleEventClick\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Calendar, \"j18ueuia/psAZ/XawE3UyqzOWsE=\");\n\n_c = Calendar;\nexport default Calendar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"sources":["/home/ma/soulmed-healthcare/src/inputs/calendar.js"],"names":["React","useState","useEffect","FullCalendar","dayGridPlugin","timeGridPlugin","interactionPlugin","Calendar","props","events","setEvents","handleDateSelect","selectInfo","title","prompt","calendarApi","view","calendar","unselect","addEvent","id","start","startStr","end","endStr","allDay","handleEventClick","clickInfo","window","confirm","event","remove"],"mappings":";;;AAAA,OAAQA,KAAR,IAAiBC,QAAjB,EAA2BC,SAA3B,QAA4C,OAA5C;AACA,OAAOC,YAAP,MAAyB,qBAAzB,C,CAAgD;;AAChD,OAAOC,aAAP,MAA0B,uBAA1B,C,CAAmD;;AACnD,OAAOC,cAAP,MAA2B,wBAA3B;AACA,OAAOC,iBAAP,MAA8B,2BAA9B;;;AAEA,MAAMC,QAAQ,GAAG,CAAC,EAAE,GAAGC;AAAL,CAAD,KAAkB;AAAA;;AACjC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,EAAD,CAApC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,SAAS,CAACF,KAAK,CAACC,MAAP,CAAT;AACD,GAFQ,EAEN,CAACD,KAAK,CAACC,MAAP,CAFM,CAAT;;AAIA,QAAME,gBAAgB,GAAIC,UAAD,IAAgB;AACvC,QAAIC,KAAK,GAAGC,MAAM,CAAC,yCAAD,CAAlB;AACA,QAAIC,WAAW,GAAGH,UAAU,CAACI,IAAX,CAAgBC,QAAlC;AAEAF,IAAAA,WAAW,CAACG,QAAZ,GAJuC,CAIf;;AAExB,QAAIL,KAAJ,EAAW;AACTE,MAAAA,WAAW,CAACI,QAAZ,CAAqB;AACnBC,QAAAA,EAAE,EAAE,CADe;AAEnBP,QAAAA,KAFmB;AAGnBQ,QAAAA,KAAK,EAAET,UAAU,CAACU,QAHC;AAInBC,QAAAA,GAAG,EAAEX,UAAU,CAACY,MAJG;AAKnBC,QAAAA,MAAM,EAAEb,UAAU,CAACa;AALA,OAArB;AAOD;AACF,GAfD;;AAiBA,QAAMC,gBAAgB,GAAIC,SAAD,IAAe;AACtC,QAAIC,MAAM,CAACC,OAAP,CAAgB,8CAA6CF,SAAS,CAACG,KAAV,CAAgBjB,KAAM,GAAnF,CAAJ,EAA4F;AAC1Fc,MAAAA,SAAS,CAACG,KAAV,CAAgBC,MAAhB;AACD;AACF,GAJD;;AAMA,sBACE,QAAC,YAAD;AACE,IAAA,QAAQ,EAAE,IADZ;AAEE,IAAA,WAAW,EAAC,cAFd;AAGE,IAAA,UAAU,EAAE,IAHd;AAIE,IAAA,MAAM,EAAEpB,gBAJV;AAKE,IAAA,YAAY,EAAE,IALhB;AAME,IAAA,OAAO,EAAE,CAACP,aAAD,CANX;AAOE,IAAA,QAAQ,EAAE,KAPZ;AAQE,IAAA,MAAM,EAAEK,MARV;AASE,IAAA,UAAU,EAAEiB;AATd;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CA3CD;;GAAMnB,Q;;KAAAA,Q;AA6CN,eAAeA,QAAf","sourcesContent":["import  React, { useState, useEffect } from \"react\";\nimport FullCalendar from \"@fullcalendar/react\"; // must go before plugins\nimport dayGridPlugin from \"@fullcalendar/daygrid\"; // a plugin!\nimport timeGridPlugin from '@fullcalendar/timegrid'\nimport interactionPlugin from '@fullcalendar/interaction'\n\nconst Calendar = ({ ...props }) => {\n  const [events, setEvents] = useState([]);\n  useEffect(() => {\n    setEvents(props.events);\n  }, [props.events]);\n\n  const handleDateSelect = (selectInfo) => {\n    let title = prompt(\"Please enter a new title for your event\");\n    let calendarApi = selectInfo.view.calendar;\n\n    calendarApi.unselect(); // clear date selection\n\n    if (title) {\n      calendarApi.addEvent({\n        id: 1,\n        title,\n        start: selectInfo.startStr,\n        end: selectInfo.endStr,\n        allDay: selectInfo.allDay,\n      });\n    }\n  };\n\n  const handleEventClick = (clickInfo) => {\n    if (window.confirm(`Are you sure you want to delete the event '${clickInfo.event.title}'`)) {\n      clickInfo.event.remove()\n    }\n  }\n\n  return (\n    <FullCalendar\n      editable={true}\n      initialView='dayGridMonth'\n      selectable={true}\n      select={handleDateSelect}\n      selectMirror={true}\n      plugins={[dayGridPlugin]}\n      weekends={false}\n      events={events}\n      eventClick={handleEventClick}\n\n    />\n  );\n};\n\nexport default Calendar;\n"]},"metadata":{},"sourceType":"module"}