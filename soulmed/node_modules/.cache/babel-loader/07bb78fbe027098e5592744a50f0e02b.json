{"ast":null,"code":"var _jsxFileName = \"/home/ma/soulmed-healthcare/src/inputs/price-range.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst quickAndDirtyStyle = {\n  width: \"200px\",\n  height: \"200px\",\n  background: \"#FF9900\",\n  color: \"#FFFFFF\",\n  display: \"flex\",\n  justifyContent: \"center\",\n  alignItems: \"center\"\n};\n\nconst DraggableComponent = () => {\n  _s();\n\n  const [pressed, setPressed] = useState(false);\n  const [position, setPosition] = useState({\n    x: 0,\n    y: 0\n  });\n  const ref = useRef(); // Monitor changes to position state and update DOM\n\n  useEffect(() => {\n    if (ref.current) {\n      ref.current.style.transform = `translate(${position.x}px,)`;\n    }\n  }, [position]); // Update the current position if mouse is down\n\n  const onMouseMove = event => {\n    if (pressed) {\n      setPosition({\n        x: position.x + event.movementX\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: ref,\n    style: quickAndDirtyStyle,\n    onMouseMove: onMouseMove,\n    onMouseDown: () => setPressed(true),\n    onMouseUp: () => setPressed(false),\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: pressed ? \"Dragging...\" : \"Press to drag\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DraggableComponent, \"04zGrfFWXj3ZmAPaac0yv4d5LiM=\");\n\n_c = DraggableComponent;\nexport default DraggableComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"DraggableComponent\");","map":{"version":3,"sources":["/home/ma/soulmed-healthcare/src/inputs/price-range.js"],"names":["React","useRef","useState","useEffect","quickAndDirtyStyle","width","height","background","color","display","justifyContent","alignItems","DraggableComponent","pressed","setPressed","position","setPosition","x","y","ref","current","style","transform","onMouseMove","event","movementX"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,SAAlC,QAAmD,OAAnD;;AAEA,MAAMC,kBAAkB,GAAG;AACzBC,EAAAA,KAAK,EAAE,OADkB;AAEzBC,EAAAA,MAAM,EAAE,OAFiB;AAGzBC,EAAAA,UAAU,EAAE,SAHa;AAIzBC,EAAAA,KAAK,EAAE,SAJkB;AAKzBC,EAAAA,OAAO,EAAE,MALgB;AAMzBC,EAAAA,cAAc,EAAE,QANS;AAOzBC,EAAAA,UAAU,EAAE;AAPa,CAA3B;;AAUA,MAAMC,kBAAkB,GAAG,MAAM;AAAA;;AAC/B,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACa,QAAD,EAAWC,WAAX,IAA0Bd,QAAQ,CAAC;AAAEe,IAAAA,CAAC,EAAE,CAAL;AAAQC,IAAAA,CAAC,EAAE;AAAX,GAAD,CAAxC;AACA,QAAMC,GAAG,GAAGlB,MAAM,EAAlB,CAH+B,CAK/B;;AACAE,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIgB,GAAG,CAACC,OAAR,EAAiB;AACfD,MAAAA,GAAG,CAACC,OAAJ,CAAYC,KAAZ,CAAkBC,SAAlB,GAA+B,aAAYP,QAAQ,CAACE,CAAE,MAAtD;AACD;AACF,GAJQ,EAIN,CAACF,QAAD,CAJM,CAAT,CAN+B,CAY/B;;AACA,QAAMQ,WAAW,GAAIC,KAAD,IAAW;AAC7B,QAAIX,OAAJ,EAAa;AACXG,MAAAA,WAAW,CAAC;AACVC,QAAAA,CAAC,EAAEF,QAAQ,CAACE,CAAT,GAAaO,KAAK,CAACC;AADZ,OAAD,CAAX;AAGD;AACF,GAND;;AAQA,sBACE;AACE,IAAA,GAAG,EAAEN,GADP;AAEE,IAAA,KAAK,EAAEf,kBAFT;AAGE,IAAA,WAAW,EAAEmB,WAHf;AAIE,IAAA,WAAW,EAAE,MAAMT,UAAU,CAAC,IAAD,CAJ/B;AAKE,IAAA,SAAS,EAAE,MAAMA,UAAU,CAAC,KAAD,CAL7B;AAAA,2BAOE;AAAA,gBAAID,OAAO,GAAG,aAAH,GAAmB;AAA9B;AAAA;AAAA;AAAA;AAAA;AAPF;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CAhCD;;GAAMD,kB;;KAAAA,kB;AAkCN,eAAeA,kBAAf","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\n\nconst quickAndDirtyStyle = {\n  width: \"200px\",\n  height: \"200px\",\n  background: \"#FF9900\",\n  color: \"#FFFFFF\",\n  display: \"flex\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n};\n\nconst DraggableComponent = () => {\n  const [pressed, setPressed] = useState(false);\n  const [position, setPosition] = useState({ x: 0, y: 0 });\n  const ref = useRef();\n\n  // Monitor changes to position state and update DOM\n  useEffect(() => {\n    if (ref.current) {\n      ref.current.style.transform = `translate(${position.x}px,)`;\n    }\n  }, [position]);\n\n  // Update the current position if mouse is down\n  const onMouseMove = (event) => {\n    if (pressed) {\n      setPosition({\n        x: position.x + event.movementX,\n      });\n    }\n  };\n\n  return (\n    <div\n      ref={ref}\n      style={quickAndDirtyStyle}\n      onMouseMove={onMouseMove}\n      onMouseDown={() => setPressed(true)}\n      onMouseUp={() => setPressed(false)}\n    >\n      <p>{pressed ? \"Dragging...\" : \"Press to drag\"}</p>\n    </div>\n  );\n};\n\nexport default DraggableComponent;\n"]},"metadata":{},"sourceType":"module"}