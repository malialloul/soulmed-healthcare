{"ast":null,"code":"import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\nimport Backend from \"i18next-http-backend\";\nimport LanguageDetector from \"i18next-browser-languagedetector\"; // don't want to use this?\n// have a look at the Quick start guide\n// for passing in lng and translations on init\n\nconst getTranslationsEndpoint = \"https://github.com/malialloul/locales/tree/main/{{lng}}/{{ns}}.json\";\ni18n // load translation using http -> see /public/locales (i.e. https://github.com/i18next/react-i18next/tree/master/example/react/public/locales)\n// learn more: https://github.com/i18next/i18next-http-backend\n// want your translations to be loaded from a professional CDN? => https://github.com/locize/react-tutorial#step-2---use-the-locize-cdn\n.use(Backend) // detect user language\n// learn more: https://github.com/i18next/i18next-browser-languageDetector\n.use(LanguageDetector) // pass the i18n instance to react-i18next.\n.use(initReactI18next) // init i18next\n// for all options read: https://www.i18next.com/overview/configuration-options\n.init({\n  lng: \"en\",\n  fallbackLng: \"en\",\n  debug: true,\n  defaultNS: \"translation\",\n  ns: \"translation\",\n  initImmediate: false,\n  // set initImmediate false -> init method finished only when all resources/translation finish loading (async behaviour)\n  interpolation: {\n    escapeValue: false // not needed for react as it escapes by default\n\n  },\n  parsePayload: function (namespace, key, fallbackValue) {\n    return {\n      key\n    };\n  },\n  backend: {\n    addPath: \"/locales/all.json\",\n    withCredentials: false,\n    crossDomain: false,\n    requestOptions: {\n      method: \"GET\",\n      mode: \"no-cors\",\n      crossDomain: true\n    },\n    parse: data => {\n      const json = JSON.parse(data); // returns [es-ES: {common: {…}, content: {…}}]\n\n      return json[0].fileContent; // Getting a specific language for example purposes\n    },\n    loadPath: getTranslationsEndpoint\n  }\n});\nexport default i18n;","map":{"version":3,"sources":["/home/ma/soulmed-healthcare/src/i18n.js"],"names":["i18n","initReactI18next","Backend","LanguageDetector","getTranslationsEndpoint","use","init","lng","fallbackLng","debug","defaultNS","ns","initImmediate","interpolation","escapeValue","parsePayload","namespace","key","fallbackValue","backend","addPath","withCredentials","crossDomain","requestOptions","method","mode","parse","data","json","JSON","fileContent","loadPath"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,SAAjB;AACA,SAASC,gBAAT,QAAiC,eAAjC;AAEA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,gBAAP,MAA6B,kCAA7B,C,CACA;AACA;AACA;;AAEA,MAAMC,uBAAuB,GAC3B,qEADF;AAGAJ,IAAI,CACF;AACA;AACA;AAHE,CAIDK,GAJH,CAIOH,OAJP,EAKE;AACA;AANF,CAOGG,GAPH,CAOOF,gBAPP,EAQE;AARF,CASGE,GATH,CASOJ,gBATP,EAUE;AACA;AAXF,CAYGK,IAZH,CAYQ;AACJC,EAAAA,GAAG,EAAE,IADD;AAEJC,EAAAA,WAAW,EAAE,IAFT;AAGJC,EAAAA,KAAK,EAAE,IAHH;AAIJC,EAAAA,SAAS,EAAE,aAJP;AAKJC,EAAAA,EAAE,EAAE,aALA;AAMJC,EAAAA,aAAa,EAAE,KANX;AAMkB;AAEtBC,EAAAA,aAAa,EAAE;AACbC,IAAAA,WAAW,EAAE,KADA,CACO;;AADP,GARX;AAWJC,EAAAA,YAAY,EAAE,UAASC,SAAT,EAAoBC,GAApB,EAAyBC,aAAzB,EAAwC;AAAE,WAAO;AAAED,MAAAA;AAAF,KAAP;AAAgB,GAXpE;AAaJE,EAAAA,OAAO,EAAE;AACPC,IAAAA,OAAO,EAAC,mBADD;AAEPC,IAAAA,eAAe,EAAE,KAFV;AAGPC,IAAAA,WAAW,EAAE,KAHN;AAIPC,IAAAA,cAAc,EAAE;AACdC,MAAAA,MAAM,EAAE,KADM;AAEdC,MAAAA,IAAI,EAAE,SAFQ;AAGdH,MAAAA,WAAW,EAAC;AAHE,KAJT;AAUPI,IAAAA,KAAK,EAAGC,IAAD,IAAU;AACf,YAAMC,IAAI,GAAGC,IAAI,CAACH,KAAL,CAAWC,IAAX,CAAb,CADe,CACe;;AAC9B,aAAOC,IAAI,CAAC,CAAD,CAAJ,CAAQE,WAAf,CAFe,CAEY;AAC5B,KAbM;AAcPC,IAAAA,QAAQ,EAAE3B;AAdH;AAbL,CAZR;AA2CA,eAAeJ,IAAf","sourcesContent":["import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\n\nimport Backend from \"i18next-http-backend\";\nimport LanguageDetector from \"i18next-browser-languagedetector\";\n// don't want to use this?\n// have a look at the Quick start guide\n// for passing in lng and translations on init\n\nconst getTranslationsEndpoint =\n  \"https://github.com/malialloul/locales/tree/main/{{lng}}/{{ns}}.json\";\n\ni18n\n  // load translation using http -> see /public/locales (i.e. https://github.com/i18next/react-i18next/tree/master/example/react/public/locales)\n  // learn more: https://github.com/i18next/i18next-http-backend\n  // want your translations to be loaded from a professional CDN? => https://github.com/locize/react-tutorial#step-2---use-the-locize-cdn\n  .use(Backend)\n  // detect user language\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\n  .use(LanguageDetector)\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  // init i18next\n  // for all options read: https://www.i18next.com/overview/configuration-options\n  .init({\n    lng: \"en\",\n    fallbackLng: \"en\",\n    debug: true,\n    defaultNS: \"translation\",\n    ns: \"translation\",\n    initImmediate: false, // set initImmediate false -> init method finished only when all resources/translation finish loading (async behaviour)\n    \n    interpolation: {\n      escapeValue: false, // not needed for react as it escapes by default\n    },\n    parsePayload: function(namespace, key, fallbackValue) { return { key } },\n\n    backend: {\n      addPath:\"/locales/all.json\",\n      withCredentials: false,\n      crossDomain: false,\n      requestOptions: {\n        method: \"GET\",\n        mode: \"no-cors\",\n        crossDomain:true,\n       \n      },\n      parse: (data) => {\n        const json = JSON.parse(data) // returns [es-ES: {common: {…}, content: {…}}]\n        return json[0].fileContent // Getting a specific language for example purposes\n      },\n      loadPath: getTranslationsEndpoint,\n    },\n  });\n\nexport default i18n;\n"]},"metadata":{},"sourceType":"module"}