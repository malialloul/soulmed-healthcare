{"ast":null,"code":"import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\nimport Backend from \"i18next-http-backend\";\nimport LanguageDetector from \"i18next-browser-languagedetector\"; // don't want to use this?\n// have a look at the Quick start guide\n// for passing in lng and translations on init\n\nconst getTranslationsEndpoint = \"https://github.com/malialloul/locales/{{ns}}/{{lng}}.json\";\nconsole.log(getTranslationsEndpoint);\ni18n // load translation using http -> see /public/locales (i.e. https://github.com/i18next/react-i18next/tree/master/example/react/public/locales)\n// learn more: https://github.com/i18next/i18next-http-backend\n// want your translations to be loaded from a professional CDN? => https://github.com/locize/react-tutorial#step-2---use-the-locize-cdn\n.use(Backend) // detect user language\n// learn more: https://github.com/i18next/i18next-browser-languageDetector\n.use(LanguageDetector) // pass the i18n instance to react-i18next.\n.use(initReactI18next) // init i18next\n// for all options read: https://www.i18next.com/overview/configuration-options\n.init({\n  lng: \"en\",\n  fallbackLng: \"en\",\n  debug: true,\n  defaultNS: \"translation\",\n  ns: \"translation\",\n  initImmediate: false,\n  // set initImmediate false -> init method finished only when all resources/translation finish loading (async behaviour)\n  interpolation: {\n    escapeValue: false // not needed for react as it escapes by default\n\n  },\n  backend: {\n    withCredentials: false,\n    crossDomain: false,\n    requestOptions: {\n      // used for fetch, can also be a function (payload) => ({ method: 'GET' })\n      mode: \"cors\",\n      credentials: \"same-origin\",\n      cache: \"default\"\n    },\n    request: function (options, url, callback, payload) {\n      return callback(getTranslationsEndpoint, {\n        status: 200\n      });\n    }\n  }\n});\nexport default i18n;","map":{"version":3,"sources":["/home/ma/soulmed-healthcare/src/i18n.js"],"names":["i18n","initReactI18next","Backend","LanguageDetector","getTranslationsEndpoint","console","log","use","init","lng","fallbackLng","debug","defaultNS","ns","initImmediate","interpolation","escapeValue","backend","withCredentials","crossDomain","requestOptions","mode","credentials","cache","request","options","url","callback","payload","status"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,SAAjB;AACA,SAASC,gBAAT,QAAiC,eAAjC;AAEA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,gBAAP,MAA6B,kCAA7B,C,CACA;AACA;AACA;;AAEA,MAAMC,uBAAuB,GAC3B,2DADF;AAEAC,OAAO,CAACC,GAAR,CAAYF,uBAAZ;AAEAJ,IAAI,CACF;AACA;AACA;AAHE,CAIDO,GAJH,CAIOL,OAJP,EAKE;AACA;AANF,CAOGK,GAPH,CAOOJ,gBAPP,EAQE;AARF,CASGI,GATH,CASON,gBATP,EAUE;AACA;AAXF,CAYGO,IAZH,CAYQ;AACJC,EAAAA,GAAG,EAAE,IADD;AAEJC,EAAAA,WAAW,EAAE,IAFT;AAGJC,EAAAA,KAAK,EAAE,IAHH;AAIJC,EAAAA,SAAS,EAAE,aAJP;AAKJC,EAAAA,EAAE,EAAE,aALA;AAMJC,EAAAA,aAAa,EAAE,KANX;AAMkB;AAEtBC,EAAAA,aAAa,EAAE;AACbC,IAAAA,WAAW,EAAE,KADA,CACO;;AADP,GARX;AAWJC,EAAAA,OAAO,EAAE;AACPC,IAAAA,eAAe,EAAE,KADV;AAGPC,IAAAA,WAAW,EAAE,KAHN;AAIPC,IAAAA,cAAc,EAAE;AACd;AACAC,MAAAA,IAAI,EAAE,MAFQ;AAGdC,MAAAA,WAAW,EAAE,aAHC;AAIdC,MAAAA,KAAK,EAAE;AAJO,KAJT;AAUPC,IAAAA,OAAO,EAAE,UAAUC,OAAV,EAAmBC,GAAnB,EAAwBC,QAAxB,EAAkCC,OAAlC,EAA2C;AAClD,aAAOD,QAAQ,CACbvB,uBADa,EAEb;AACEyB,QAAAA,MAAM,EAAE;AADV,OAFa,CAAf;AAMD;AAjBM;AAXL,CAZR;AA4CA,eAAe7B,IAAf","sourcesContent":["import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\n\nimport Backend from \"i18next-http-backend\";\nimport LanguageDetector from \"i18next-browser-languagedetector\";\n// don't want to use this?\n// have a look at the Quick start guide\n// for passing in lng and translations on init\n\nconst getTranslationsEndpoint =\n  \"https://github.com/malialloul/locales/{{ns}}/{{lng}}.json\";\nconsole.log(getTranslationsEndpoint);\n\ni18n\n  // load translation using http -> see /public/locales (i.e. https://github.com/i18next/react-i18next/tree/master/example/react/public/locales)\n  // learn more: https://github.com/i18next/i18next-http-backend\n  // want your translations to be loaded from a professional CDN? => https://github.com/locize/react-tutorial#step-2---use-the-locize-cdn\n  .use(Backend)\n  // detect user language\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\n  .use(LanguageDetector)\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  // init i18next\n  // for all options read: https://www.i18next.com/overview/configuration-options\n  .init({\n    lng: \"en\",\n    fallbackLng: \"en\",\n    debug: true,\n    defaultNS: \"translation\",\n    ns: \"translation\",\n    initImmediate: false, // set initImmediate false -> init method finished only when all resources/translation finish loading (async behaviour)\n\n    interpolation: {\n      escapeValue: false, // not needed for react as it escapes by default\n    },\n    backend: {\n      withCredentials: false,\n\n      crossDomain: false,\n      requestOptions: {\n        // used for fetch, can also be a function (payload) => ({ method: 'GET' })\n        mode: \"cors\",\n        credentials: \"same-origin\",\n        cache: \"default\",\n      },\n      request: function (options, url, callback, payload) {\n        return callback(\n          getTranslationsEndpoint,\n          {\n            status: 200,\n          }\n        );\n      },\n    },\n  });\n\nexport default i18n;\n"]},"metadata":{},"sourceType":"module"}