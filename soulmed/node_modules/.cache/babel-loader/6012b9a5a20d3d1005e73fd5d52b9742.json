{"ast":null,"code":"var _jsxFileName = \"/home/ma/soulmed-healthcare/src/inputs/search-input.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SearchInput = ({ ...props\n}) => {\n  _s();\n\n  const [data, setData] = useState([]);\n  const [shownIndices, setShownIndices] = useState([]);\n  console.log(props.searchText);\n  useEffect(() => {\n    if (props.data.length > 0) {\n      setData(props.data);\n      setShownIndices(Array.from({\n        length: props.data.length\n      }, (_, i) => i));\n    }\n  }, [props.data]);\n  useEffect(() => {\n    if (props.searchText !== \"\") {\n      setShownIndices([]);\n      let list = [];\n      props.data.map((item, i) => {\n        Object.keys(item).map((innerAttr, index) => {\n          if ((item[innerAttr] + \"\").indexOf(props.searchText) >= 0) {\n            list.push(i);\n          }\n        });\n      });\n      setShownIndices(list);\n    } else {\n      setShownIndices(Array.from({\n        length: props.data.length\n      }, (_, i) => i));\n    }\n  }, [props.searchText]);\n  const [visible, isVisible] = useState(false);\n  const ref = useRef();\n  useEffect(() => {\n    const checkIfClickedOutside = e => {\n      if (visible && ref.current && !ref.current.contains(e.target)) {\n        isVisible(false);\n      }\n    };\n\n    document.addEventListener(\"mousedown\", checkIfClickedOutside);\n    return () => {\n      document.removeEventListener(\"mousedown\", checkIfClickedOutside);\n    };\n  }, [visible]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: ref,\n    onClick: () => isVisible(!visible),\n    className: \"col-4\",\n    children: [props.children, visible && data.length > 0 && /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"search-dropdown rounded col-3 d-flex flex-column \",\n      children: data.map((item, index) => {\n        return shownIndices.indexOf(index) >= 0 && /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"dropdown-content\",\n          children: item.name\n        }, \"item\" + index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 17\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SearchInput, \"e2bvvqxOLMhxyXGAyBNsb1RRWf4=\");\n\n_c = SearchInput;\nexport default SearchInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchInput\");","map":{"version":3,"sources":["/home/ma/soulmed-healthcare/src/inputs/search-input.js"],"names":["useState","useEffect","useRef","SearchInput","props","data","setData","shownIndices","setShownIndices","console","log","searchText","length","Array","from","_","i","list","map","item","Object","keys","innerAttr","index","indexOf","push","visible","isVisible","ref","checkIfClickedOutside","e","current","contains","target","document","addEventListener","removeEventListener","children","name"],"mappings":"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","sourcesContent":["import { useState, useEffect, useRef } from \"react\";\n\nconst SearchInput = ({ ...props }) => {\n  const [data, setData] = useState([]);\n  const [shownIndices, setShownIndices] = useState([]);\n  console.log(props.searchText)\n\n  useEffect(() => {\n    if (props.data.length > 0) {\n\n      setData(props.data);\n      setShownIndices(Array.from({ length: props.data.length }, (_, i) => i));\n    }\n  }, [props.data]);\n\n  useEffect(() => {\n    if (props.searchText !== \"\") {\n      setShownIndices([]);\n      let list = [];\n      props.data.map((item, i) => {\n        Object.keys(item).map((innerAttr, index) => {\n          if ((item[innerAttr] + \"\").indexOf(props.searchText) >= 0) {\n            list.push(i);\n          }\n        });\n      });\n      setShownIndices(list);\n    } else {\n      setShownIndices(Array.from({ length: props.data.length }, (_, i) => i));\n    }\n  }, [props.searchText]);\n\n  const [visible, isVisible] = useState(false);\n  const ref = useRef();\n  useEffect(() => {\n    const checkIfClickedOutside = (e) => {\n      if (visible && ref.current && !ref.current.contains(e.target)) {\n        isVisible(false);\n      }\n    };\n\n    document.addEventListener(\"mousedown\", checkIfClickedOutside);\n\n    return () => {\n      document.removeEventListener(\"mousedown\", checkIfClickedOutside);\n    };\n  }, [visible]);\n\n  return (\n    <div ref={ref} onClick={() => isVisible(!visible)} className=\"col-4\">\n      {props.children}\n      {visible && data.length > 0 && (\n        <ul className=\"search-dropdown rounded col-3 d-flex flex-column \">\n          {data.map((item, index) => {\n            return (\n              shownIndices.indexOf(index) >= 0 && (\n                <li key={\"item\" + index} className=\"dropdown-content\">\n                  {item.name}\n                </li>\n              )\n            );\n          })}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default SearchInput;\n"]},"metadata":{},"sourceType":"module"}