{"ast":null,"code":"import axios from \"axios\";\nimport Geocode from \"react-geocode\";\nimport configData from \"../configData.json\";\nconst SERVER_URL = \"localhost\";\nconst SERVER_PORT = \"5000\";\nconst apiURL = \"http://\" + SERVER_URL + \":\" + SERVER_PORT;\n\nconst getDoctorsData = ({\n  _start = 0,\n  _length = 10\n}) => {\n  return axios.get(apiURL + \"/doctor?_start=\" + _start + \"&_end=\" + _length).then(res => {\n    return res;\n  });\n};\n\nconst getAllCategories = () => {\n  return axios.get(apiURL + \"/categories\");\n};\n\nconst getAllProvisions = () => {\n  return axios.get(apiURL + \"/provision\");\n};\n\nconst getInfoByQuery = query => {\n  return axios.get(apiURL + \"/info?\" + query);\n};\n\nconst getProfessionByCategory = category_id => {\n  return axios.get(apiURL + \"/profession\" + (category_id !== 0 ? \"?category_fk=\" + category_id : \"\"));\n};\n\nconst getProfession = profession_fk => {\n  return axios.get(apiURL + \"/profession\" + (profession_fk !== -1 ? \"?id=\" + profession_fk : \"\"));\n};\n\nconst getCategory = category_id => {\n  console.log(category_id);\n  console.log(apiURL + \"/categories\" + (category_id !== 0 ? \"?id=\" + category_id : \"\"));\n  return axios.get(apiURL + \"/categories\" + (category_id !== 0 ? \"?id=\" + category_id : \"\"));\n};\n\nconst getInfoByProfession = profession_fk => {\n  return axios.get(apiURL + \"/info\" + (profession_fk !== -1 ? \"?profession_fk=\" + profession_fk : \"\"));\n};\n\nconst getCurrentLocation = async () => {\n  const myLocation = {\n    district: \"\",\n    state: \"\"\n  };\n  navigator.geolocation.getCurrentPosition(function (position) {\n    const my_location = {\n      lat: position.coords.latitude,\n      lng: position.coords.longitude\n    };\n    Geocode.fromLatLng(my_location.lat, my_location.lng).then(response => {\n      for (var i = 0; i < response.results[0].address_components.length; i++) {\n        for (var b = 0; b < response.results[0].address_components[i].types.length; b++) {\n          if (response.results[0].address_components[i].types[b] === \"administrative_area_level_2\") {\n            var city = response.results[0].address_components[i];\n            myLocation.district = city.long_name;\n            break;\n          }\n        }\n      }\n\n      for (var i = 0; i < response.results[0].address_components.length; i++) {\n        for (var b = 0; b < response.results[0].address_components[i].types.length; b++) {\n          if (response.results[0].address_components[i].types[b] === \"administrative_area_level_1\") {\n            var state = response.results[0].address_components[i];\n            myLocation.state = state.long_name;\n            break;\n          }\n        }\n      }\n\n      return myLocation;\n    }, error => {\n      console.error(error);\n    });\n  });\n};\n\nexport const welcomeConroller = {\n  getDoctorsData,\n  getCurrentLocation,\n  getAllCategories,\n  getProfessionByCategory,\n  getProfession,\n  getCategory,\n  getInfoByProfession,\n  getAllProvisions,\n  getInfoByQuery\n};","map":{"version":3,"sources":["/home/ma/soulmed-healthcare/src/controllers/welcome-page.js"],"names":["axios","Geocode","configData","SERVER_URL","SERVER_PORT","apiURL","getDoctorsData","_start","_length","get","then","res","getAllCategories","getAllProvisions","getInfoByQuery","query","getProfessionByCategory","category_id","getProfession","profession_fk","getCategory","console","log","getInfoByProfession","getCurrentLocation","myLocation","district","state","navigator","geolocation","getCurrentPosition","position","my_location","lat","coords","latitude","lng","longitude","fromLatLng","response","i","results","address_components","length","b","types","city","long_name","error","welcomeConroller"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport Geocode from \"react-geocode\";\nimport configData from \"../configData.json\";\n\nconst SERVER_URL = \"localhost\";\nconst SERVER_PORT = \"5000\";\n\nconst apiURL = \"http://\" + SERVER_URL + \":\" + SERVER_PORT;\n\nconst getDoctorsData = ({ _start = 0, _length = 10 }) => {\n  return axios\n    .get(apiURL + \"/doctor?_start=\" + _start + \"&_end=\" + _length)\n    .then((res) => {\n      return res;\n    });\n};\n\nconst getAllCategories = () => {\n  return axios.get(apiURL + \"/categories\");\n};\n\nconst getAllProvisions = () => {\n  return axios.get(apiURL + \"/provision\");\n};\n\nconst getInfoByQuery = (query) => {\n  return axios.get(apiURL + \"/info?\" + query);\n};\n\nconst getProfessionByCategory = (category_id) => {\n  return axios.get(\n    apiURL +\n      \"/profession\" +\n      (category_id !== 0 ? \"?category_fk=\" + category_id : \"\")\n  );\n};\n\nconst getProfession = (profession_fk) => {\n \n  return axios.get(\n    apiURL +\n      \"/profession\" +\n      (profession_fk !== -1 ? \"?id=\" + profession_fk : \"\")\n  );\n};\n\nconst getCategory = (category_id) => {\n  console.log(category_id)\n  console.log(      apiURL + \"/categories\" + (category_id !== 0 ? \"?id=\" + category_id : \"\")\n  )\n  return axios\n    .get(\n      apiURL + \"/categories\" + (category_id !== 0 ? \"?id=\" + category_id : \"\")\n    );\n};\n\nconst getInfoByProfession = (profession_fk) => {\n  return axios.get(\n    apiURL +\n      \"/info\" +\n      (profession_fk !== -1 ? \"?profession_fk=\" + profession_fk : \"\")\n  );\n};\n\nconst getCurrentLocation = async () => {\n  const myLocation = {\n    district: \"\",\n    state: \"\",\n  };\n  navigator.geolocation.getCurrentPosition(function (position) {\n    const my_location = {\n      lat: position.coords.latitude,\n      lng: position.coords.longitude,\n    };\n\n    Geocode.fromLatLng(my_location.lat, my_location.lng).then(\n      (response) => {\n        for (\n          var i = 0;\n          i < response.results[0].address_components.length;\n          i++\n        ) {\n          for (\n            var b = 0;\n            b < response.results[0].address_components[i].types.length;\n            b++\n          ) {\n            if (\n              response.results[0].address_components[i].types[b] ===\n              \"administrative_area_level_2\"\n            ) {\n              var city = response.results[0].address_components[i];\n\n              myLocation.district = city.long_name;\n              break;\n            }\n          }\n        }\n\n        for (\n          var i = 0;\n          i < response.results[0].address_components.length;\n          i++\n        ) {\n          for (\n            var b = 0;\n            b < response.results[0].address_components[i].types.length;\n            b++\n          ) {\n            if (\n              response.results[0].address_components[i].types[b] ===\n              \"administrative_area_level_1\"\n            ) {\n              var state = response.results[0].address_components[i];\n              myLocation.state = state.long_name;\n\n              break;\n            }\n          }\n        }\n        return myLocation;\n      },\n      (error) => {\n        console.error(error);\n      }\n    );\n  });\n};\n\nexport const welcomeConroller = {\n  getDoctorsData,\n  getCurrentLocation,\n  getAllCategories,\n  getProfessionByCategory,\n  getProfession,\n  getCategory,\n  getInfoByProfession,\n  getAllProvisions,\n  getInfoByQuery,\n};\n"]},"metadata":{},"sourceType":"module"}