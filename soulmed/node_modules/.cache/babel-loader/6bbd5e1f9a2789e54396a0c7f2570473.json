{"ast":null,"code":"import { welcomeConroller } from \"../controllers/welcome-page\";\nimport moment from \"moment\";\n\nconst isValidEmail = email => // eslint-disable-next-line no-useless-escape\n/^\\w+([\\\\.-]?\\w+)*@\\w+([\\\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(email);\n\nconst isValidPassword = password => {\n  /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$/.test(password);\n};\n\nconst isValidPhoneNumber = phone_number => {\n  /^[0-9]*$/.test(phone_number);\n};\n\nconst isValidName = firstName => {\n  /^[A-Za-z]+$/i.test(firstName);\n};\n\nconst showItem = (item, searchText) => {\n  let show = false;\n\n  if (searchText === \"\") {\n    show = true;\n  }\n\n  Object.keys(item).map((innerAttr, index) => {\n    if ((item[innerAttr] + \"\").indexOf(searchText) >= 0) {\n      show = true;\n    }\n  });\n  return show;\n};\n\nconst getProfessionAndCategoriesNames = profession_id => {\n  return welcomeConroller.getInfoByQuery().then(response => {\n    let res = response.data;\n    let list = [];\n\n    for (let i = 0; i < res.length; i++) {\n      let json = {};\n      welcomeConroller.getProfession(res[i].profession_fk).then(pr => {\n        const cfk = pr.data[0].category_fk;\n        welcomeConroller.getCategory(cfk).then(cat => {\n          json[\"profession_name\"] = pr.data[0].name;\n          json[\"category_name\"] = cat.data[0].name;\n          json[\"userId\"] = res[i].id;\n          list.push(json);\n\n          if (i === res.length - 1) {\n            return list;\n          }\n        });\n      });\n    }\n  });\n};\n\nconst sameDay = (d1, d2) => {\n  return d1.getFullYear() === d2.getFullYear() && d1.getMonth() === d2.getMonth() && d1.getDate() === d2.getDate();\n};\n\nconst getDayDate = i => {\n  var curr = new Date(); // get current date\n\n  var first = curr.getDate() - curr.getDay(); // First day is the day of the month - the day of the week\n\n  var last = first + i + 1; // last day is the first day + 6\n\n  return moment(new Date(curr.setDate(last))).format(\"YYYY-MM-DD\");\n};\n\nconst isToday = someDate => {\n  const today = new Date();\n  return someDate.getDate() === today.getDate() && someDate.getMonth() === today.getMonth() && someDate.getFullYear() === today.getFullYear();\n};\n\nconst isOverlapping = (event, events) => {\n  for (let i in events) {\n    if (events[i].id !== event.id && sameDay(new Date(events[i].start), new Date(event.start))) {\n      if (new Date(event.start) < new Date(events[i].end) && new Date(events[i].start) < new Date(event.end)) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\nconst isValidTimingInterval = (start, end) => {\n  return start >= end;\n};\n\nexport const util = {\n  sameDay,\n  isValidEmail,\n  isValidName,\n  isValidPassword,\n  isValidPhoneNumber,\n  showItem,\n  getProfessionAndCategoriesNames,\n  getDayDate,\n  isToday,\n  isOverlapping,\n  isValidTimingInterval\n};","map":{"version":3,"sources":["/home/ma/soulmed-healthcare/src/public/util.js"],"names":["welcomeConroller","moment","isValidEmail","email","test","isValidPassword","password","isValidPhoneNumber","phone_number","isValidName","firstName","showItem","item","searchText","show","Object","keys","map","innerAttr","index","indexOf","getProfessionAndCategoriesNames","profession_id","getInfoByQuery","then","response","res","data","list","i","length","json","getProfession","profession_fk","pr","cfk","category_fk","getCategory","cat","name","id","push","sameDay","d1","d2","getFullYear","getMonth","getDate","getDayDate","curr","Date","first","getDay","last","setDate","format","isToday","someDate","today","isOverlapping","event","events","start","end","isValidTimingInterval","util"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,6BAAjC;AACA,OAAOC,MAAP,MAAmB,QAAnB;;AAEA,MAAMC,YAAY,GAAIC,KAAD,IACnB;AACA,kDAAkDC,IAAlD,CAAuDD,KAAvD,CAFF;;AAIA,MAAME,eAAe,GAAIC,QAAD,IAAc;AACpC,mDAAiDF,IAAjD,CAAsDE,QAAtD;AACD,CAFD;;AAIA,MAAMC,kBAAkB,GAAIC,YAAD,IAAkB;AAC3C,aAAWJ,IAAX,CAAgBI,YAAhB;AACD,CAFD;;AAIA,MAAMC,WAAW,GAAIC,SAAD,IAAe;AACjC,iBAAeN,IAAf,CAAoBM,SAApB;AACD,CAFD;;AAIA,MAAMC,QAAQ,GAAG,CAACC,IAAD,EAAOC,UAAP,KAAsB;AACrC,MAAIC,IAAI,GAAG,KAAX;;AACA,MAAID,UAAU,KAAK,EAAnB,EAAuB;AACrBC,IAAAA,IAAI,GAAG,IAAP;AACD;;AACDC,EAAAA,MAAM,CAACC,IAAP,CAAYJ,IAAZ,EAAkBK,GAAlB,CAAsB,CAACC,SAAD,EAAYC,KAAZ,KAAsB;AAC1C,QAAI,CAACP,IAAI,CAACM,SAAD,CAAJ,GAAkB,EAAnB,EAAuBE,OAAvB,CAA+BP,UAA/B,KAA8C,CAAlD,EAAqD;AACnDC,MAAAA,IAAI,GAAG,IAAP;AACD;AACF,GAJD;AAMA,SAAOA,IAAP;AACD,CAZD;;AAcA,MAAMO,+BAA+B,GAAIC,aAAD,IAAmB;AACzD,SAAOtB,gBAAgB,CAACuB,cAAjB,GAAkCC,IAAlC,CAAwCC,QAAD,IAAc;AAC1D,QAAIC,GAAG,GAAGD,QAAQ,CAACE,IAAnB;AACA,QAAIC,IAAI,GAAG,EAAX;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,GAAG,CAACI,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACnC,UAAIE,IAAI,GAAG,EAAX;AACA/B,MAAAA,gBAAgB,CAACgC,aAAjB,CAA+BN,GAAG,CAACG,CAAD,CAAH,CAAOI,aAAtC,EAAqDT,IAArD,CAA2DU,EAAD,IAAQ;AAChE,cAAMC,GAAG,GAAGD,EAAE,CAACP,IAAH,CAAQ,CAAR,EAAWS,WAAvB;AAEApC,QAAAA,gBAAgB,CAACqC,WAAjB,CAA6BF,GAA7B,EAAkCX,IAAlC,CAAwCc,GAAD,IAAS;AAC9CP,UAAAA,IAAI,CAAC,iBAAD,CAAJ,GAA0BG,EAAE,CAACP,IAAH,CAAQ,CAAR,EAAWY,IAArC;AACAR,UAAAA,IAAI,CAAC,eAAD,CAAJ,GAAwBO,GAAG,CAACX,IAAJ,CAAS,CAAT,EAAYY,IAApC;AACAR,UAAAA,IAAI,CAAC,QAAD,CAAJ,GAAiBL,GAAG,CAACG,CAAD,CAAH,CAAOW,EAAxB;AACAZ,UAAAA,IAAI,CAACa,IAAL,CAAUV,IAAV;;AACA,cAAIF,CAAC,KAAKH,GAAG,CAACI,MAAJ,GAAa,CAAvB,EAA0B;AACxB,mBAAOF,IAAP;AACD;AACF,SARD;AASD,OAZD;AAaD;AACF,GAnBM,CAAP;AAoBD,CArBD;;AAsBA,MAAMc,OAAO,GAAG,CAACC,EAAD,EAAKC,EAAL,KAAY;AAC1B,SACED,EAAE,CAACE,WAAH,OAAqBD,EAAE,CAACC,WAAH,EAArB,IACAF,EAAE,CAACG,QAAH,OAAkBF,EAAE,CAACE,QAAH,EADlB,IAEAH,EAAE,CAACI,OAAH,OAAiBH,EAAE,CAACG,OAAH,EAHnB;AAKD,CAND;;AAQA,MAAMC,UAAU,GAAInB,CAAD,IAAO;AACxB,MAAIoB,IAAI,GAAG,IAAIC,IAAJ,EAAX,CADwB,CACD;;AACvB,MAAIC,KAAK,GAAGF,IAAI,CAACF,OAAL,KAAiBE,IAAI,CAACG,MAAL,EAA7B,CAFwB,CAEoB;;AAC5C,MAAIC,IAAI,GAAGF,KAAK,GAAGtB,CAAR,GAAY,CAAvB,CAHwB,CAGE;;AAE1B,SAAO5B,MAAM,CAAC,IAAIiD,IAAJ,CAASD,IAAI,CAACK,OAAL,CAAaD,IAAb,CAAT,CAAD,CAAN,CAAqCE,MAArC,CAA4C,YAA5C,CAAP;AACD,CAND;;AAQA,MAAMC,OAAO,GAAIC,QAAD,IAAc;AAC5B,QAAMC,KAAK,GAAG,IAAIR,IAAJ,EAAd;AACA,SACEO,QAAQ,CAACV,OAAT,OAAuBW,KAAK,CAACX,OAAN,EAAvB,IACAU,QAAQ,CAACX,QAAT,OAAwBY,KAAK,CAACZ,QAAN,EADxB,IAEAW,QAAQ,CAACZ,WAAT,OAA2Ba,KAAK,CAACb,WAAN,EAH7B;AAKD,CAPD;;AASA,MAAMc,aAAa,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACvC,OAAK,IAAIhC,CAAT,IAAcgC,MAAd,EAAsB;AACpB,QACEA,MAAM,CAAChC,CAAD,CAAN,CAAUW,EAAV,KAAiBoB,KAAK,CAACpB,EAAvB,IACAE,OAAO,CAAC,IAAIQ,IAAJ,CAASW,MAAM,CAAChC,CAAD,CAAN,CAAUiC,KAAnB,CAAD,EAA4B,IAAIZ,IAAJ,CAASU,KAAK,CAACE,KAAf,CAA5B,CAFT,EAGE;AACA,UACE,IAAIZ,IAAJ,CAASU,KAAK,CAACE,KAAf,IAAwB,IAAIZ,IAAJ,CAASW,MAAM,CAAChC,CAAD,CAAN,CAAUkC,GAAnB,CAAxB,IACA,IAAIb,IAAJ,CAASW,MAAM,CAAChC,CAAD,CAAN,CAAUiC,KAAnB,IAA4B,IAAIZ,IAAJ,CAASU,KAAK,CAACG,GAAf,CAF9B,EAGE;AACA,eAAO,IAAP;AACD;AACF;AACF;;AACD,SAAO,KAAP;AACD,CAfD;;AAmBA,MAAMC,qBAAqB,GAAG,CAACF,KAAD,EAAQC,GAAR,KAAgB;AAC5C,SAAOD,KAAK,IAAIC,GAAhB;AACD,CAFD;;AAIA,OAAO,MAAME,IAAI,GAAG;AAClBvB,EAAAA,OADkB;AAElBxC,EAAAA,YAFkB;AAGlBO,EAAAA,WAHkB;AAIlBJ,EAAAA,eAJkB;AAKlBE,EAAAA,kBALkB;AAMlBI,EAAAA,QANkB;AAOlBU,EAAAA,+BAPkB;AAQlB2B,EAAAA,UARkB;AASlBQ,EAAAA,OATkB;AAUlBG,EAAAA,aAVkB;AAWlBK,EAAAA;AAXkB,CAAb","sourcesContent":["import { welcomeConroller } from \"../controllers/welcome-page\";\nimport moment from \"moment\";\n\nconst isValidEmail = (email) =>\n  // eslint-disable-next-line no-useless-escape\n  /^\\w+([\\\\.-]?\\w+)*@\\w+([\\\\.-]?\\w+)*(\\.\\w{2,3})+$/.test(email);\n\nconst isValidPassword = (password) => {\n  /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$/.test(password);\n};\n\nconst isValidPhoneNumber = (phone_number) => {\n  /^[0-9]*$/.test(phone_number);\n};\n\nconst isValidName = (firstName) => {\n  /^[A-Za-z]+$/i.test(firstName);\n};\n\nconst showItem = (item, searchText) => {\n  let show = false;\n  if (searchText === \"\") {\n    show = true;\n  }\n  Object.keys(item).map((innerAttr, index) => {\n    if ((item[innerAttr] + \"\").indexOf(searchText) >= 0) {\n      show = true;\n    }\n  });\n\n  return show;\n};\n\nconst getProfessionAndCategoriesNames = (profession_id) => {\n  return welcomeConroller.getInfoByQuery().then((response) => {\n    let res = response.data;\n    let list = [];\n    for (let i = 0; i < res.length; i++) {\n      let json = {};\n      welcomeConroller.getProfession(res[i].profession_fk).then((pr) => {\n        const cfk = pr.data[0].category_fk;\n\n        welcomeConroller.getCategory(cfk).then((cat) => {\n          json[\"profession_name\"] = pr.data[0].name;\n          json[\"category_name\"] = cat.data[0].name;\n          json[\"userId\"] = res[i].id;\n          list.push(json);\n          if (i === res.length - 1) {\n            return list;\n          }\n        });\n      });\n    }\n  });\n};\nconst sameDay = (d1, d2) => {\n  return (\n    d1.getFullYear() === d2.getFullYear() &&\n    d1.getMonth() === d2.getMonth() &&\n    d1.getDate() === d2.getDate()\n  );\n};\n\nconst getDayDate = (i) => {\n  var curr = new Date(); // get current date\n  var first = curr.getDate() - curr.getDay(); // First day is the day of the month - the day of the week\n  var last = first + i + 1; // last day is the first day + 6\n\n  return moment(new Date(curr.setDate(last))).format(\"YYYY-MM-DD\");\n};\n\nconst isToday = (someDate) => {\n  const today = new Date();\n  return (\n    someDate.getDate() === today.getDate() &&\n    someDate.getMonth() === today.getMonth() &&\n    someDate.getFullYear() === today.getFullYear()\n  );\n};\n\nconst isOverlapping = (event, events) => {\n  for (let i in events) {\n    if (\n      events[i].id !== event.id &&\n      sameDay(new Date(events[i].start), new Date(event.start))\n    ) {\n      if (\n        new Date(event.start) < new Date(events[i].end) &&\n        new Date(events[i].start) < new Date(event.end)\n      ) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n\n\nconst isValidTimingInterval = (start, end) => {\n  return start >= end;\n};\n\nexport const util = {\n  sameDay,\n  isValidEmail,\n  isValidName,\n  isValidPassword,\n  isValidPhoneNumber,\n  showItem,\n  getProfessionAndCategoriesNames,\n  getDayDate,\n  isToday,\n  isOverlapping,\n  isValidTimingInterval,\n};\n"]},"metadata":{},"sourceType":"module"}